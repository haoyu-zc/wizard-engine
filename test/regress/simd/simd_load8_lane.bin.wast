(module binary
  "\00\61\73\6d\01\00\00\00\01\8c\80\80\80\00\02\60"
  "\02\7f\7b\01\7b\60\01\7b\01\7b\03\b1\80\80\80\00"
  "\30\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01"
  "\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\05\83\80\80\80\00\01\00\01\07\e9\89\80\80\00"
  "\30\11\76\31\32\38\2e\6c\6f\61\64\38\5f\6c\61\6e"
  "\65\5f\30\00\00\11\76\31\32\38\2e\6c\6f\61\64\38"
  "\5f\6c\61\6e\65\5f\31\00\01\11\76\31\32\38\2e\6c"
  "\6f\61\64\38\5f\6c\61\6e\65\5f\32\00\02\11\76\31"
  "\32\38\2e\6c\6f\61\64\38\5f\6c\61\6e\65\5f\33\00"
  "\03\11\76\31\32\38\2e\6c\6f\61\64\38\5f\6c\61\6e"
  "\65\5f\34\00\04\11\76\31\32\38\2e\6c\6f\61\64\38"
  "\5f\6c\61\6e\65\5f\35\00\05\11\76\31\32\38\2e\6c"
  "\6f\61\64\38\5f\6c\61\6e\65\5f\36\00\06\11\76\31"
  "\32\38\2e\6c\6f\61\64\38\5f\6c\61\6e\65\5f\37\00"
  "\07\11\76\31\32\38\2e\6c\6f\61\64\38\5f\6c\61\6e"
  "\65\5f\38\00\08\11\76\31\32\38\2e\6c\6f\61\64\38"
  "\5f\6c\61\6e\65\5f\39\00\09\12\76\31\32\38\2e\6c"
  "\6f\61\64\38\5f\6c\61\6e\65\5f\31\30\00\0a\12\76"
  "\31\32\38\2e\6c\6f\61\64\38\5f\6c\61\6e\65\5f\31"
  "\31\00\0b\12\76\31\32\38\2e\6c\6f\61\64\38\5f\6c"
  "\61\6e\65\5f\31\32\00\0c\12\76\31\32\38\2e\6c\6f"
  "\61\64\38\5f\6c\61\6e\65\5f\31\33\00\0d\12\76\31"
  "\32\38\2e\6c\6f\61\64\38\5f\6c\61\6e\65\5f\31\34"
  "\00\0e\12\76\31\32\38\2e\6c\6f\61\64\38\5f\6c\61"
  "\6e\65\5f\31\35\00\0f\1a\76\31\32\38\2e\6c\6f\61"
  "\64\38\5f\6c\61\6e\65\5f\30\5f\6f\66\66\73\65\74"
  "\5f\30\00\10\1a\76\31\32\38\2e\6c\6f\61\64\38\5f"
  "\6c\61\6e\65\5f\31\5f\6f\66\66\73\65\74\5f\31\00"
  "\11\1a\76\31\32\38\2e\6c\6f\61\64\38\5f\6c\61\6e"
  "\65\5f\32\5f\6f\66\66\73\65\74\5f\32\00\12\1a\76"
  "\31\32\38\2e\6c\6f\61\64\38\5f\6c\61\6e\65\5f\33"
  "\5f\6f\66\66\73\65\74\5f\33\00\13\1a\76\31\32\38"
  "\2e\6c\6f\61\64\38\5f\6c\61\6e\65\5f\34\5f\6f\66"
  "\66\73\65\74\5f\34\00\14\1a\76\31\32\38\2e\6c\6f"
  "\61\64\38\5f\6c\61\6e\65\5f\35\5f\6f\66\66\73\65"
  "\74\5f\35\00\15\1a\76\31\32\38\2e\6c\6f\61\64\38"
  "\5f\6c\61\6e\65\5f\36\5f\6f\66\66\73\65\74\5f\36"
  "\00\16\1a\76\31\32\38\2e\6c\6f\61\64\38\5f\6c\61"
  "\6e\65\5f\37\5f\6f\66\66\73\65\74\5f\37\00\17\1a"
  "\76\31\32\38\2e\6c\6f\61\64\38\5f\6c\61\6e\65\5f"
  "\38\5f\6f\66\66\73\65\74\5f\38\00\18\1a\76\31\32"
  "\38\2e\6c\6f\61\64\38\5f\6c\61\6e\65\5f\39\5f\6f"
  "\66\66\73\65\74\5f\39\00\19\1c\76\31\32\38\2e\6c"
  "\6f\61\64\38\5f\6c\61\6e\65\5f\31\30\5f\6f\66\66"
  "\73\65\74\5f\31\30\00\1a\1c\76\31\32\38\2e\6c\6f"
  "\61\64\38\5f\6c\61\6e\65\5f\31\31\5f\6f\66\66\73"
  "\65\74\5f\31\31\00\1b\1c\76\31\32\38\2e\6c\6f\61"
  "\64\38\5f\6c\61\6e\65\5f\31\32\5f\6f\66\66\73\65"
  "\74\5f\31\32\00\1c\1c\76\31\32\38\2e\6c\6f\61\64"
  "\38\5f\6c\61\6e\65\5f\31\33\5f\6f\66\66\73\65\74"
  "\5f\31\33\00\1d\1c\76\31\32\38\2e\6c\6f\61\64\38"
  "\5f\6c\61\6e\65\5f\31\34\5f\6f\66\66\73\65\74\5f"
  "\31\34\00\1e\1c\76\31\32\38\2e\6c\6f\61\64\38\5f"
  "\6c\61\6e\65\5f\31\35\5f\6f\66\66\73\65\74\5f\31"
  "\35\00\1f\19\76\31\32\38\2e\6c\6f\61\64\38\5f\6c"
  "\61\6e\65\5f\30\5f\61\6c\69\67\6e\5f\31\00\20\19"
  "\76\31\32\38\2e\6c\6f\61\64\38\5f\6c\61\6e\65\5f"
  "\31\5f\61\6c\69\67\6e\5f\31\00\21\19\76\31\32\38"
  "\2e\6c\6f\61\64\38\5f\6c\61\6e\65\5f\32\5f\61\6c"
  "\69\67\6e\5f\31\00\22\19\76\31\32\38\2e\6c\6f\61"
  "\64\38\5f\6c\61\6e\65\5f\33\5f\61\6c\69\67\6e\5f"
  "\31\00\23\19\76\31\32\38\2e\6c\6f\61\64\38\5f\6c"
  "\61\6e\65\5f\34\5f\61\6c\69\67\6e\5f\31\00\24\19"
  "\76\31\32\38\2e\6c\6f\61\64\38\5f\6c\61\6e\65\5f"
  "\35\5f\61\6c\69\67\6e\5f\31\00\25\19\76\31\32\38"
  "\2e\6c\6f\61\64\38\5f\6c\61\6e\65\5f\36\5f\61\6c"
  "\69\67\6e\5f\31\00\26\19\76\31\32\38\2e\6c\6f\61"
  "\64\38\5f\6c\61\6e\65\5f\37\5f\61\6c\69\67\6e\5f"
  "\31\00\27\19\76\31\32\38\2e\6c\6f\61\64\38\5f\6c"
  "\61\6e\65\5f\38\5f\61\6c\69\67\6e\5f\31\00\28\19"
  "\76\31\32\38\2e\6c\6f\61\64\38\5f\6c\61\6e\65\5f"
  "\39\5f\61\6c\69\67\6e\5f\31\00\29\1a\76\31\32\38"
  "\2e\6c\6f\61\64\38\5f\6c\61\6e\65\5f\31\30\5f\61"
  "\6c\69\67\6e\5f\31\00\2a\1a\76\31\32\38\2e\6c\6f"
  "\61\64\38\5f\6c\61\6e\65\5f\31\31\5f\61\6c\69\67"
  "\6e\5f\31\00\2b\1a\76\31\32\38\2e\6c\6f\61\64\38"
  "\5f\6c\61\6e\65\5f\31\32\5f\61\6c\69\67\6e\5f\31"
  "\00\2c\1a\76\31\32\38\2e\6c\6f\61\64\38\5f\6c\61"
  "\6e\65\5f\31\33\5f\61\6c\69\67\6e\5f\31\00\2d\1a"
  "\76\31\32\38\2e\6c\6f\61\64\38\5f\6c\61\6e\65\5f"
  "\31\34\5f\61\6c\69\67\6e\5f\31\00\2e\1a\76\31\32"
  "\38\2e\6c\6f\61\64\38\5f\6c\61\6e\65\5f\31\35\5f"
  "\61\6c\69\67\6e\5f\31\00\2f\0a\81\86\80\80\00\30"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\00\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\01\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\02\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\03\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\04\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\05\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\06\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\07\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\08\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\09\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\0a\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\0b\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\0c\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\0d\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\0e\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\0f\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\54\00\00\00\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\54\00\01\01\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\54\00\02\02\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\54\00\03\03\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\54\00\04\04\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\54\00\05\05\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\54\00\06\06\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\54\00\07\07\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\54\00\08\08\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\54\00\09\09\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\54\00\0a\0a\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\54\00\0b\0b\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\54\00\0c\0c\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\54\00\0d\0d\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\54\00\0e\0e\0b"
  "\8b\80\80\80\00\00\41\00\20\00\fd\54\00\0f\0f\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\00\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\01\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\02\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\03\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\04\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\05\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\06\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\07\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\08\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\09\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\0a\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\0b\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\0c\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\0d\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\0e\0b"
  "\8b\80\80\80\00\00\20\00\20\01\fd\54\00\00\0f\0b"
  "\0b\96\80\80\80\00\01\00\41\00\0b\10\00\01\02\03"
  "\04\05\06\07\08\09\0a\0b\0c\0d\0e\0f"
)
(assert_return
  (invoke "v128.load8_lane_0"
    (i32.const 0x0)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_1"
    (i32.const 0x1)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x1
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_2"
    (i32.const 0x2)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x2
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_3"
    (i32.const 0x3)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x3
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_4"
    (i32.const 0x4)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x4
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_5"
    (i32.const 0x5)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x5
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_6"
    (i32.const 0x6)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x6
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_7"
    (i32.const 0x7)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x7
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_8"
    (i32.const 0x8)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x8
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_9"
    (i32.const 0x9)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x9
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_10"
    (i32.const 0xa)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0xa
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_11"
    (i32.const 0xb)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0xb
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_12"
    (i32.const 0xc)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0xc
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_13"
    (i32.const 0xd)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0xd
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_14"
    (i32.const 0xe)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0xe
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_15"
    (i32.const 0xf)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0xf
  )
)
(assert_return
  (invoke "v128.load8_lane_0_offset_0" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_1_offset_1" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i8x16
    0x0
    0x1
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_2_offset_2" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i8x16
    0x0
    0x0
    0x2
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_3_offset_3" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x3
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_4_offset_4" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x4
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_5_offset_5" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x5
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_6_offset_6" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x6
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_7_offset_7" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x7
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_8_offset_8" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x8
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_9_offset_9" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x9
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_10_offset_10" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0xa
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_11_offset_11" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0xb
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_12_offset_12" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0xc
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_13_offset_13" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0xd
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_14_offset_14" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0xe
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_15_offset_15" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0xf
  )
)
(assert_return
  (invoke "v128.load8_lane_0_align_1"
    (i32.const 0x0)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_1_align_1"
    (i32.const 0x1)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x1
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_2_align_1"
    (i32.const 0x2)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x2
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_3_align_1"
    (i32.const 0x3)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x3
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_4_align_1"
    (i32.const 0x4)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x4
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_5_align_1"
    (i32.const 0x5)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x5
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_6_align_1"
    (i32.const 0x6)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x6
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_7_align_1"
    (i32.const 0x7)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x7
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_8_align_1"
    (i32.const 0x8)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x8
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_9_align_1"
    (i32.const 0x9)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x9
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_10_align_1"
    (i32.const 0xa)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0xa
    0x0
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_11_align_1"
    (i32.const 0xb)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0xb
    0x0
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_12_align_1"
    (i32.const 0xc)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0xc
    0x0
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_13_align_1"
    (i32.const 0xd)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0xd
    0x0
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_14_align_1"
    (i32.const 0xe)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0xe
    0x0
  )
)
(assert_return
  (invoke "v128.load8_lane_15_align_1"
    (i32.const 0xf)
    (v128.const i32x4 0x0 0x0 0x0 0x0)
  )
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0x0
    0xf
  )
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7b\01\7b\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\91\80\80\80\00\01\8b\80\80\80"
    "\00\00\20\00\41\00\fd\54\00\00\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7b\01\7b\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\91\80\80\80\00\01\8b\80\80\80"
    "\00\00\41\00\20\00\fd\54\00\00\10\0b"
  )
  "invalid lane index"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\86\80\80\80\00\01\60"
    "\01\7b\01\7b\03\82\80\80\80\00\01\00\05\83\80\80"
    "\80\00\01\00\01\0a\91\80\80\80\00\01\8b\80\80\80"
    "\00\00\41\00\20\00\fd\54\01\00\00\0b"
  )
  "alignment must not be larger than natural"
)
