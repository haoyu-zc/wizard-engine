(module binary
  "\00\61\73\6d\01\00\00\00\01\8a\80\80\80\00\02\60"
  "\01\7f\01\7b\60\00\01\7b\03\b1\80\80\80\00\30\00"
  "\00\00\00\00\00\01\01\01\01\01\01\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\05"
  "\83\80\80\80\00\01\00\01\07\d3\8a\80\80\00\30\0e"
  "\76\31\32\38\2e\6c\6f\61\64\38\78\38\5f\73\00\00"
  "\0e\76\31\32\38\2e\6c\6f\61\64\38\78\38\5f\75\00"
  "\01\0f\76\31\32\38\2e\6c\6f\61\64\31\36\78\34\5f"
  "\73\00\02\0f\76\31\32\38\2e\6c\6f\61\64\31\36\78"
  "\34\5f\75\00\03\0f\76\31\32\38\2e\6c\6f\61\64\33"
  "\32\78\32\5f\73\00\04\0f\76\31\32\38\2e\6c\6f\61"
  "\64\33\32\78\32\5f\75\00\05\15\76\31\32\38\2e\6c"
  "\6f\61\64\38\78\38\5f\73\5f\63\6f\6e\73\74\30\00"
  "\06\15\76\31\32\38\2e\6c\6f\61\64\38\78\38\5f\75"
  "\5f\63\6f\6e\73\74\38\00\07\17\76\31\32\38\2e\6c"
  "\6f\61\64\31\36\78\34\5f\73\5f\63\6f\6e\73\74\31"
  "\30\00\08\17\76\31\32\38\2e\6c\6f\61\64\31\36\78"
  "\34\5f\75\5f\63\6f\6e\73\74\32\30\00\09\1a\76\31"
  "\32\38\2e\6c\6f\61\64\33\32\78\32\5f\73\5f\63\6f"
  "\6e\73\74\36\35\35\32\30\00\0a\1a\76\31\32\38\2e"
  "\6c\6f\61\64\33\32\78\32\5f\75\5f\63\6f\6e\73\74"
  "\36\35\35\32\36\00\0b\16\76\31\32\38\2e\6c\6f\61"
  "\64\38\78\38\5f\73\5f\6f\66\66\73\65\74\30\00\0c"
  "\15\76\31\32\38\2e\6c\6f\61\64\38\78\38\5f\73\5f"
  "\61\6c\69\67\6e\31\00\0d\1d\76\31\32\38\2e\6c\6f"
  "\61\64\38\78\38\5f\73\5f\6f\66\66\73\65\74\30\5f"
  "\61\6c\69\67\6e\31\00\0e\1d\76\31\32\38\2e\6c\6f"
  "\61\64\38\78\38\5f\73\5f\6f\66\66\73\65\74\31\5f"
  "\61\6c\69\67\6e\31\00\0f\1e\76\31\32\38\2e\6c\6f"
  "\61\64\38\78\38\5f\73\5f\6f\66\66\73\65\74\31\30"
  "\5f\61\6c\69\67\6e\34\00\10\1e\76\31\32\38\2e\6c"
  "\6f\61\64\38\78\38\5f\73\5f\6f\66\66\73\65\74\32"
  "\30\5f\61\6c\69\67\6e\38\00\11\16\76\31\32\38\2e"
  "\6c\6f\61\64\38\78\38\5f\75\5f\6f\66\66\73\65\74"
  "\30\00\12\15\76\31\32\38\2e\6c\6f\61\64\38\78\38"
  "\5f\75\5f\61\6c\69\67\6e\31\00\13\1d\76\31\32\38"
  "\2e\6c\6f\61\64\38\78\38\5f\75\5f\6f\66\66\73\65"
  "\74\30\5f\61\6c\69\67\6e\31\00\14\1d\76\31\32\38"
  "\2e\6c\6f\61\64\38\78\38\5f\75\5f\6f\66\66\73\65"
  "\74\31\5f\61\6c\69\67\6e\31\00\15\1e\76\31\32\38"
  "\2e\6c\6f\61\64\38\78\38\5f\75\5f\6f\66\66\73\65"
  "\74\31\30\5f\61\6c\69\67\6e\34\00\16\1e\76\31\32"
  "\38\2e\6c\6f\61\64\38\78\38\5f\75\5f\6f\66\66\73"
  "\65\74\32\30\5f\61\6c\69\67\6e\38\00\17\17\76\31"
  "\32\38\2e\6c\6f\61\64\31\36\78\34\5f\73\5f\6f\66"
  "\66\73\65\74\30\00\18\16\76\31\32\38\2e\6c\6f\61"
  "\64\31\36\78\34\5f\73\5f\61\6c\69\67\6e\31\00\19"
  "\1e\76\31\32\38\2e\6c\6f\61\64\31\36\78\34\5f\73"
  "\5f\6f\66\66\73\65\74\30\5f\61\6c\69\67\6e\31\00"
  "\1a\1e\76\31\32\38\2e\6c\6f\61\64\31\36\78\34\5f"
  "\73\5f\6f\66\66\73\65\74\31\5f\61\6c\69\67\6e\31"
  "\00\1b\1f\76\31\32\38\2e\6c\6f\61\64\31\36\78\34"
  "\5f\73\5f\6f\66\66\73\65\74\31\30\5f\61\6c\69\67"
  "\6e\34\00\1c\1f\76\31\32\38\2e\6c\6f\61\64\31\36"
  "\78\34\5f\73\5f\6f\66\66\73\65\74\32\30\5f\61\6c"
  "\69\67\6e\38\00\1d\17\76\31\32\38\2e\6c\6f\61\64"
  "\31\36\78\34\5f\75\5f\6f\66\66\73\65\74\30\00\1e"
  "\16\76\31\32\38\2e\6c\6f\61\64\31\36\78\34\5f\75"
  "\5f\61\6c\69\67\6e\31\00\1f\1e\76\31\32\38\2e\6c"
  "\6f\61\64\31\36\78\34\5f\75\5f\6f\66\66\73\65\74"
  "\30\5f\61\6c\69\67\6e\31\00\20\1e\76\31\32\38\2e"
  "\6c\6f\61\64\31\36\78\34\5f\75\5f\6f\66\66\73\65"
  "\74\31\5f\61\6c\69\67\6e\31\00\21\1f\76\31\32\38"
  "\2e\6c\6f\61\64\31\36\78\34\5f\75\5f\6f\66\66\73"
  "\65\74\31\30\5f\61\6c\69\67\6e\34\00\22\1f\76\31"
  "\32\38\2e\6c\6f\61\64\31\36\78\34\5f\75\5f\6f\66"
  "\66\73\65\74\32\30\5f\61\6c\69\67\6e\38\00\23\17"
  "\76\31\32\38\2e\6c\6f\61\64\33\32\78\32\5f\73\5f"
  "\6f\66\66\73\65\74\30\00\24\16\76\31\32\38\2e\6c"
  "\6f\61\64\33\32\78\32\5f\73\5f\61\6c\69\67\6e\31"
  "\00\25\1e\76\31\32\38\2e\6c\6f\61\64\33\32\78\32"
  "\5f\73\5f\6f\66\66\73\65\74\30\5f\61\6c\69\67\6e"
  "\31\00\26\1e\76\31\32\38\2e\6c\6f\61\64\33\32\78"
  "\32\5f\73\5f\6f\66\66\73\65\74\31\5f\61\6c\69\67"
  "\6e\31\00\27\1f\76\31\32\38\2e\6c\6f\61\64\33\32"
  "\78\32\5f\73\5f\6f\66\66\73\65\74\31\30\5f\61\6c"
  "\69\67\6e\34\00\28\1f\76\31\32\38\2e\6c\6f\61\64"
  "\33\32\78\32\5f\73\5f\6f\66\66\73\65\74\32\30\5f"
  "\61\6c\69\67\6e\38\00\29\17\76\31\32\38\2e\6c\6f"
  "\61\64\33\32\78\32\5f\75\5f\6f\66\66\73\65\74\30"
  "\00\2a\16\76\31\32\38\2e\6c\6f\61\64\33\32\78\32"
  "\5f\75\5f\61\6c\69\67\6e\31\00\2b\1e\76\31\32\38"
  "\2e\6c\6f\61\64\33\32\78\32\5f\75\5f\6f\66\66\73"
  "\65\74\30\5f\61\6c\69\67\6e\31\00\2c\1e\76\31\32"
  "\38\2e\6c\6f\61\64\33\32\78\32\5f\75\5f\6f\66\66"
  "\73\65\74\31\5f\61\6c\69\67\6e\31\00\2d\1f\76\31"
  "\32\38\2e\6c\6f\61\64\33\32\78\32\5f\75\5f\6f\66"
  "\66\73\65\74\31\30\5f\61\6c\69\67\6e\34\00\2e\1f"
  "\76\31\32\38\2e\6c\6f\61\64\33\32\78\32\5f\75\5f"
  "\6f\66\66\73\65\74\32\30\5f\61\6c\69\67\6e\38\00"
  "\2f\0a\f5\84\80\80\00\30\88\80\80\80\00\00\20\00"
  "\fd\01\03\00\0b\88\80\80\80\00\00\20\00\fd\02\03"
  "\00\0b\88\80\80\80\00\00\20\00\fd\03\03\00\0b\88"
  "\80\80\80\00\00\20\00\fd\04\03\00\0b\88\80\80\80"
  "\00\00\20\00\fd\05\03\00\0b\88\80\80\80\00\00\20"
  "\00\fd\06\03\00\0b\88\80\80\80\00\00\41\00\fd\01"
  "\03\00\0b\88\80\80\80\00\00\41\08\fd\02\03\00\0b"
  "\88\80\80\80\00\00\41\0a\fd\03\03\00\0b\88\80\80"
  "\80\00\00\41\14\fd\04\03\00\0b\8a\80\80\80\00\00"
  "\41\f0\ff\03\fd\05\03\00\0b\8a\80\80\80\00\00\41"
  "\f6\ff\03\fd\06\03\00\0b\88\80\80\80\00\00\20\00"
  "\fd\01\03\00\0b\88\80\80\80\00\00\20\00\fd\01\00"
  "\00\0b\88\80\80\80\00\00\20\00\fd\01\00\00\0b\88"
  "\80\80\80\00\00\20\00\fd\01\00\01\0b\88\80\80\80"
  "\00\00\20\00\fd\01\02\0a\0b\88\80\80\80\00\00\20"
  "\00\fd\01\03\14\0b\88\80\80\80\00\00\20\00\fd\02"
  "\03\00\0b\88\80\80\80\00\00\20\00\fd\02\00\00\0b"
  "\88\80\80\80\00\00\20\00\fd\02\00\00\0b\88\80\80"
  "\80\00\00\20\00\fd\02\00\01\0b\88\80\80\80\00\00"
  "\20\00\fd\02\02\0a\0b\88\80\80\80\00\00\20\00\fd"
  "\02\03\14\0b\88\80\80\80\00\00\20\00\fd\03\03\00"
  "\0b\88\80\80\80\00\00\20\00\fd\03\00\00\0b\88\80"
  "\80\80\00\00\20\00\fd\03\00\00\0b\88\80\80\80\00"
  "\00\20\00\fd\03\00\01\0b\88\80\80\80\00\00\20\00"
  "\fd\03\02\0a\0b\88\80\80\80\00\00\20\00\fd\03\03"
  "\14\0b\88\80\80\80\00\00\20\00\fd\04\03\00\0b\88"
  "\80\80\80\00\00\20\00\fd\04\00\00\0b\88\80\80\80"
  "\00\00\20\00\fd\04\00\00\0b\88\80\80\80\00\00\20"
  "\00\fd\04\00\01\0b\88\80\80\80\00\00\20\00\fd\04"
  "\02\0a\0b\88\80\80\80\00\00\20\00\fd\04\03\14\0b"
  "\88\80\80\80\00\00\20\00\fd\05\03\00\0b\88\80\80"
  "\80\00\00\20\00\fd\05\00\00\0b\88\80\80\80\00\00"
  "\20\00\fd\05\00\00\0b\88\80\80\80\00\00\20\00\fd"
  "\05\00\01\0b\88\80\80\80\00\00\20\00\fd\05\02\0a"
  "\0b\88\80\80\80\00\00\20\00\fd\05\03\14\0b\88\80"
  "\80\80\00\00\20\00\fd\06\03\00\0b\88\80\80\80\00"
  "\00\20\00\fd\06\00\00\0b\88\80\80\80\00\00\20\00"
  "\fd\06\00\00\0b\88\80\80\80\00\00\20\00\fd\06\00"
  "\01\0b\88\80\80\80\00\00\20\00\fd\06\02\0a\0b\88"
  "\80\80\80\00\00\20\00\fd\06\03\14\0b\0b\b7\80\80"
  "\80\00\02\00\41\00\0b\1a\00\01\02\03\04\05\06\07"
  "\08\09\0a\0b\0c\0d\0e\0f\80\81\82\83\84\85\86\87"
  "\88\89\00\41\f0\ff\03\0b\10\0a\0b\0c\0d\0e\0f\80"
  "\81\82\83\84\85\86\87\88\89"
)
(assert_return
  (invoke "v128.load8x8_s" (i32.const 0x0))
  (v128.const i16x8 0x0 0x1 0x2 0x3 0x4 0x5 0x6 0x7)
)
(assert_return
  (invoke "v128.load8x8_u" (i32.const 0x0))
  (v128.const i16x8 0x0 0x1 0x2 0x3 0x4 0x5 0x6 0x7)
)
(assert_return
  (invoke "v128.load16x4_s" (i32.const 0x0))
  (v128.const i32x4 0x100 0x302 0x504 0x706)
)
(assert_return
  (invoke "v128.load16x4_u" (i32.const 0x0))
  (v128.const i32x4 0x100 0x302 0x504 0x706)
)
(assert_return
  (invoke "v128.load32x2_s" (i32.const 0x0))
  (v128.const i64x2 0x302_0100 0x706_0504)
)
(assert_return
  (invoke "v128.load32x2_u" (i32.const 0x0))
  (v128.const i64x2 0x302_0100 0x706_0504)
)
(assert_return
  (invoke "v128.load8x8_s" (i32.const 0xa))
  (v128.const i16x8 0xa 0xb 0xc 0xd 0xe 0xf 0xff80 0xff81)
)
(assert_return
  (invoke "v128.load8x8_u" (i32.const 0xa))
  (v128.const i16x8 0xa 0xb 0xc 0xd 0xe 0xf 0x80 0x81)
)
(assert_return
  (invoke "v128.load16x4_s" (i32.const 0xa))
  (v128.const i32x4 0xb0a 0xd0c 0xf0e 0xffff_8180)
)
(assert_return
  (invoke "v128.load16x4_u" (i32.const 0xa))
  (v128.const i32x4 0xb0a 0xd0c 0xf0e 0x8180)
)
(assert_return
  (invoke "v128.load32x2_s" (i32.const 0xa))
  (v128.const i64x2 0xd0c_0b0a 0xffff_ffff_8180_0f0e)
)
(assert_return
  (invoke "v128.load32x2_u" (i32.const 0xa))
  (v128.const i64x2 0xd0c_0b0a 0x8180_0f0e)
)
(assert_return
  (invoke "v128.load8x8_s" (i32.const 0x14))
  (v128.const i16x8 0xff84 0xff85 0xff86 0xff87 0xff88 0xff89 0x0 0x0)
)
(assert_return
  (invoke "v128.load8x8_u" (i32.const 0x14))
  (v128.const i16x8 0x84 0x85 0x86 0x87 0x88 0x89 0x0 0x0)
)
(assert_return
  (invoke "v128.load16x4_s" (i32.const 0x14))
  (v128.const i32x4 0xffff_8584 0xffff_8786 0xffff_8988 0x0)
)
(assert_return
  (invoke "v128.load16x4_u" (i32.const 0x14))
  (v128.const i32x4 0x8584 0x8786 0x8988 0x0)
)
(assert_return
  (invoke "v128.load32x2_s" (i32.const 0x14))
  (v128.const i64x2 0xffff_ffff_8786_8584 0x8988)
)
(assert_return
  (invoke "v128.load32x2_u" (i32.const 0x14))
  (v128.const i64x2 0x8786_8584 0x8988)
)
(assert_return
  (invoke "v128.load8x8_s_const0")
  (v128.const i16x8 0x0 0x1 0x2 0x3 0x4 0x5 0x6 0x7)
)
(assert_return
  (invoke "v128.load8x8_u_const8")
  (v128.const i16x8 0x8 0x9 0xa 0xb 0xc 0xd 0xe 0xf)
)
(assert_return
  (invoke "v128.load16x4_s_const10")
  (v128.const i32x4 0xb0a 0xd0c 0xf0e 0xffff_8180)
)
(assert_return
  (invoke "v128.load16x4_u_const20")
  (v128.const i32x4 0x8584 0x8786 0x8988 0x0)
)
(assert_return
  (invoke "v128.load32x2_s_const65520")
  (v128.const i64x2 0xd0c_0b0a 0xffff_ffff_8180_0f0e)
)
(assert_return
  (invoke "v128.load32x2_u_const65526")
  (v128.const i64x2 0x8382_8180 0x8786_8584)
)
(assert_return
  (invoke "v128.load8x8_s_offset0" (i32.const 0x0))
  (v128.const i16x8 0x0 0x1 0x2 0x3 0x4 0x5 0x6 0x7)
)
(assert_return
  (invoke "v128.load8x8_s_align1" (i32.const 0x1))
  (v128.const i16x8 0x1 0x2 0x3 0x4 0x5 0x6 0x7 0x8)
)
(assert_return
  (invoke "v128.load8x8_s_offset0_align1" (i32.const 0x2))
  (v128.const i16x8 0x2 0x3 0x4 0x5 0x6 0x7 0x8 0x9)
)
(assert_return
  (invoke "v128.load8x8_s_offset10_align4" (i32.const 0x3))
  (v128.const i16x8 0xd 0xe 0xf 0xff80 0xff81 0xff82 0xff83 0xff84)
)
(assert_return
  (invoke "v128.load8x8_s_offset20_align8" (i32.const 0x4))
  (v128.const i16x8 0xff88 0xff89 0x0 0x0 0x0 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load8x8_u_offset0" (i32.const 0x0))
  (v128.const i16x8 0x0 0x1 0x2 0x3 0x4 0x5 0x6 0x7)
)
(assert_return
  (invoke "v128.load8x8_u_align1" (i32.const 0x1))
  (v128.const i16x8 0x1 0x2 0x3 0x4 0x5 0x6 0x7 0x8)
)
(assert_return
  (invoke "v128.load8x8_u_offset0_align1" (i32.const 0x2))
  (v128.const i16x8 0x2 0x3 0x4 0x5 0x6 0x7 0x8 0x9)
)
(assert_return
  (invoke "v128.load8x8_u_offset10_align4" (i32.const 0x3))
  (v128.const i16x8 0xd 0xe 0xf 0x80 0x81 0x82 0x83 0x84)
)
(assert_return
  (invoke "v128.load8x8_u_offset20_align8" (i32.const 0x4))
  (v128.const i16x8 0x88 0x89 0x0 0x0 0x0 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16x4_s_offset0" (i32.const 0x0))
  (v128.const i32x4 0x100 0x302 0x504 0x706)
)
(assert_return
  (invoke "v128.load16x4_s_align1" (i32.const 0x1))
  (v128.const i32x4 0x201 0x403 0x605 0x807)
)
(assert_return
  (invoke "v128.load16x4_s_offset0_align1" (i32.const 0x2))
  (v128.const i32x4 0x302 0x504 0x706 0x908)
)
(assert_return
  (invoke "v128.load16x4_s_offset10_align4" (i32.const 0x3))
  (v128.const i32x4 0xe0d 0xffff_800f 0xffff_8281 0xffff_8483)
)
(assert_return
  (invoke "v128.load16x4_s_offset20_align8" (i32.const 0x4))
  (v128.const i32x4 0xffff_8988 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load16x4_u_offset0" (i32.const 0x0))
  (v128.const i32x4 0x100 0x302 0x504 0x706)
)
(assert_return
  (invoke "v128.load16x4_u_align1" (i32.const 0x1))
  (v128.const i32x4 0x201 0x403 0x605 0x807)
)
(assert_return
  (invoke "v128.load16x4_u_offset0_align1" (i32.const 0x2))
  (v128.const i32x4 0x302 0x504 0x706 0x908)
)
(assert_return
  (invoke "v128.load16x4_u_offset10_align4" (i32.const 0x3))
  (v128.const i32x4 0xe0d 0x800f 0x8281 0x8483)
)
(assert_return
  (invoke "v128.load16x4_u_offset20_align8" (i32.const 0x4))
  (v128.const i32x4 0x8988 0x0 0x0 0x0)
)
(assert_return
  (invoke "v128.load32x2_s_offset0" (i32.const 0x0))
  (v128.const i64x2 0x302_0100 0x706_0504)
)
(assert_return
  (invoke "v128.load32x2_s_align1" (i32.const 0x1))
  (v128.const i64x2 0x403_0201 0x807_0605)
)
(assert_return
  (invoke "v128.load32x2_s_offset0_align1" (i32.const 0x2))
  (v128.const i64x2 0x504_0302 0x908_0706)
)
(assert_return
  (invoke "v128.load32x2_s_offset10_align4" (i32.const 0x3))
  (v128.const i64x2 0xffff_ffff_800f_0e0d 0xffff_ffff_8483_8281)
)
(assert_return
  (invoke "v128.load32x2_s_offset20_align8" (i32.const 0x4))
  (v128.const i64x2 0x8988 0x0)
)
(assert_return
  (invoke "v128.load32x2_u_offset0" (i32.const 0x0))
  (v128.const i64x2 0x302_0100 0x706_0504)
)
(assert_return
  (invoke "v128.load32x2_u_align1" (i32.const 0x1))
  (v128.const i64x2 0x403_0201 0x807_0605)
)
(assert_return
  (invoke "v128.load32x2_u_offset0_align1" (i32.const 0x2))
  (v128.const i64x2 0x504_0302 0x908_0706)
)
(assert_return
  (invoke "v128.load32x2_u_offset10_align4" (i32.const 0x3))
  (v128.const i64x2 0x800f_0e0d 0x8483_8281)
)
(assert_return
  (invoke "v128.load32x2_u_offset20_align8" (i32.const 0x4))
  (v128.const i64x2 0x8988 0x0)
)
(assert_trap
  (invoke "v128.load8x8_s" (i32.const 0xffff_ffff))
  "out of bounds memory access"
)
(assert_trap
  (invoke "v128.load8x8_u" (i32.const 0xffff_ffff))
  "out of bounds memory access"
)
(assert_trap
  (invoke "v128.load16x4_s" (i32.const 0x1_0000))
  "out of bounds memory access"
)
(assert_trap
  (invoke "v128.load16x4_u" (i32.const 0x1_0000))
  "out of bounds memory access"
)
(assert_trap
  (invoke "v128.load32x2_s" (i32.const 0xfff9))
  "out of bounds memory access"
)
(assert_trap
  (invoke "v128.load32x2_u" (i32.const 0xfff9))
  "out of bounds memory access"
)
(assert_trap
  (invoke "v128.load8x8_s_offset1_align1" (i32.const 0xffff_ffff))
  "out of bounds memory access"
)
(assert_trap
  (invoke "v128.load8x8_u_offset1_align1" (i32.const 0xffff_ffff))
  "out of bounds memory access"
)
(assert_trap
  (invoke "v128.load16x4_s_offset1_align1" (i32.const 0xffff_ffff))
  "out of bounds memory access"
)
(assert_trap
  (invoke "v128.load16x4_u_offset1_align1" (i32.const 0xffff_ffff))
  "out of bounds memory access"
)
(assert_trap
  (invoke "v128.load32x2_s_offset1_align1" (i32.const 0xffff_ffff))
  "out of bounds memory access"
)
(assert_trap
  (invoke "v128.load32x2_u_offset1_align1" (i32.const 0xffff_ffff))
  "out of bounds memory access"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7b\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\00\0a\91\80\80\80\00\01\8b\80\80\80\00"
    "\00\43\00\00\00\00\fd\01\03\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7b\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\00\0a\91\80\80\80\00\01\8b\80\80\80\00"
    "\00\43\00\00\00\00\fd\02\03\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7b\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\00\0a\95\80\80\80\00\01\8f\80\80\80\00"
    "\00\44\00\00\00\00\00\00\00\00\fd\03\03\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7b\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\00\0a\95\80\80\80\00\01\8f\80\80\80\00"
    "\00\44\00\00\00\00\00\00\00\00\fd\04\03\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7b\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\00\0a\9e\80\80\80\00\01\98\80\80\80\00"
    "\00\fd\0c\00\00\00\00\00\00\00\00\00\00\00\00\00"
    "\00\00\00\fd\05\03\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7b\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\00\0a\9e\80\80\80\00\01\98\80\80\80\00"
    "\00\fd\0c\00\00\00\00\00\00\00\00\00\00\00\00\00"
    "\00\00\00\fd\06\03\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7b\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\00\0a\8c\80\80\80\00\01\86\80\80\80\00"
    "\00\fd\01\03\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7b\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\00\0a\8c\80\80\80\00\01\86\80\80\80\00"
    "\00\fd\02\03\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7b\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\00\0a\8c\80\80\80\00\01\86\80\80\80\00"
    "\00\fd\03\03\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7b\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\00\0a\8c\80\80\80\00\01\86\80\80\80\00"
    "\00\fd\04\03\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7b\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\00\0a\8c\80\80\80\00\01\86\80\80\80\00"
    "\00\fd\05\03\00\0b"
  )
  "type mismatch"
)
(assert_invalid
  (module binary
    "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
    "\00\01\7b\03\82\80\80\80\00\01\00\05\83\80\80\80"
    "\00\01\00\00\0a\8c\80\80\80\00\01\86\80\80\80\00"
    "\00\fd\06\03\00\0b"
  )
  "type mismatch"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\89\80\80\80\00\02\60"
  "\00\01\7b\60\00\01\7f\03\93\80\80\80\00\12\00\00"
  "\00\00\00\00\00\00\00\00\00\00\01\01\01\01\01\01"
  "\05\83\80\80\80\00\01\00\01\07\c7\84\80\80\00\12"
  "\17\76\31\32\38\2e\6c\6f\61\64\38\78\38\5f\73\2d"
  "\69\6e\2d\62\6c\6f\63\6b\00\00\17\76\31\32\38\2e"
  "\6c\6f\61\64\38\78\38\5f\75\2d\69\6e\2d\62\6c\6f"
  "\63\6b\00\01\18\76\31\32\38\2e\6c\6f\61\64\31\36"
  "\78\34\5f\73\2d\69\6e\2d\62\6c\6f\63\6b\00\02\18"
  "\76\31\32\38\2e\6c\6f\61\64\31\36\78\34\5f\75\2d"
  "\69\6e\2d\62\6c\6f\63\6b\00\03\18\76\31\32\38\2e"
  "\6c\6f\61\64\33\32\78\32\5f\73\2d\69\6e\2d\62\6c"
  "\6f\63\6b\00\04\18\76\31\32\38\2e\6c\6f\61\64\33"
  "\32\78\32\5f\75\2d\69\6e\2d\62\6c\6f\63\6b\00\05"
  "\1a\76\31\32\38\2e\6c\6f\61\64\38\78\38\5f\73\2d"
  "\61\73\2d\62\72\2d\76\61\6c\75\65\00\06\1a\76\31"
  "\32\38\2e\6c\6f\61\64\38\78\38\5f\75\2d\61\73\2d"
  "\62\72\2d\76\61\6c\75\65\00\07\1b\76\31\32\38\2e"
  "\6c\6f\61\64\31\36\78\34\5f\73\2d\61\73\2d\62\72"
  "\2d\76\61\6c\75\65\00\08\1b\76\31\32\38\2e\6c\6f"
  "\61\64\31\36\78\34\5f\75\2d\61\73\2d\62\72\2d\76"
  "\61\6c\75\65\00\09\1b\76\31\32\38\2e\6c\6f\61\64"
  "\33\32\78\32\5f\73\2d\61\73\2d\62\72\2d\76\61\6c"
  "\75\65\00\0a\1b\76\31\32\38\2e\6c\6f\61\64\33\32"
  "\78\32\5f\75\2d\61\73\2d\62\72\2d\76\61\6c\75\65"
  "\00\0b\25\76\31\32\38\2e\6c\6f\61\64\38\78\38\5f"
  "\73\2d\65\78\74\72\61\63\74\5f\6c\61\6e\65\5f\73"
  "\2d\6f\70\65\72\61\6e\64\00\0c\25\76\31\32\38\2e"
  "\6c\6f\61\64\38\78\38\5f\75\2d\65\78\74\72\61\63"
  "\74\5f\6c\61\6e\65\5f\73\2d\6f\70\65\72\61\6e\64"
  "\00\0d\26\76\31\32\38\2e\6c\6f\61\64\31\36\78\34"
  "\5f\73\2d\65\78\74\72\61\63\74\5f\6c\61\6e\65\5f"
  "\73\2d\6f\70\65\72\61\6e\64\00\0e\26\76\31\32\38"
  "\2e\6c\6f\61\64\31\36\78\34\5f\75\2d\65\78\74\72"
  "\61\63\74\5f\6c\61\6e\65\5f\73\2d\6f\70\65\72\61"
  "\6e\64\00\0f\26\76\31\32\38\2e\6c\6f\61\64\33\32"
  "\78\32\5f\73\2d\65\78\74\72\61\63\74\5f\6c\61\6e"
  "\65\5f\73\2d\6f\70\65\72\61\6e\64\00\10\26\76\31"
  "\32\38\2e\6c\6f\61\64\33\32\78\32\5f\75\2d\65\78"
  "\74\72\61\63\74\5f\6c\61\6e\65\5f\73\2d\6f\70\65"
  "\72\61\6e\64\00\11\0a\bf\82\80\80\00\12\8e\80\80"
  "\80\00\00\02\7b\02\7b\41\00\fd\01\03\00\0b\0b\0b"
  "\8e\80\80\80\00\00\02\7b\02\7b\41\01\fd\02\03\00"
  "\0b\0b\0b\8e\80\80\80\00\00\02\7b\02\7b\41\02\fd"
  "\03\03\00\0b\0b\0b\8e\80\80\80\00\00\02\7b\02\7b"
  "\41\03\fd\04\03\00\0b\0b\0b\8e\80\80\80\00\00\02"
  "\7b\02\7b\41\04\fd\05\03\00\0b\0b\0b\8e\80\80\80"
  "\00\00\02\7b\02\7b\41\05\fd\06\03\00\0b\0b\0b\8d"
  "\80\80\80\00\00\02\7b\41\06\fd\01\03\00\0c\00\0b"
  "\0b\8d\80\80\80\00\00\02\7b\41\07\fd\02\03\00\0c"
  "\00\0b\0b\8d\80\80\80\00\00\02\7b\41\08\fd\03\03"
  "\00\0c\00\0b\0b\8d\80\80\80\00\00\02\7b\41\09\fd"
  "\04\03\00\0c\00\0b\0b\8d\80\80\80\00\00\02\7b\41"
  "\0a\fd\05\03\00\0c\00\0b\0b\8d\80\80\80\00\00\02"
  "\7b\41\0b\fd\06\03\00\0c\00\0b\0b\8b\80\80\80\00"
  "\00\41\0c\fd\01\03\00\fd\15\00\0b\8b\80\80\80\00"
  "\00\41\0d\fd\02\03\00\fd\15\00\0b\8b\80\80\80\00"
  "\00\41\0e\fd\03\03\00\fd\15\00\0b\8b\80\80\80\00"
  "\00\41\0f\fd\04\03\00\fd\15\00\0b\8b\80\80\80\00"
  "\00\41\10\fd\05\03\00\fd\15\00\0b\8b\80\80\80\00"
  "\00\41\11\fd\06\03\00\fd\15\00\0b\0b\a0\80\80\80"
  "\00\01\00\41\00\0b\1a\00\01\02\03\04\05\06\07\08"
  "\09\0a\0b\0c\0d\0e\0f\80\81\82\83\84\85\86\87\88"
  "\89"
)
(assert_return
  (invoke "v128.load8x8_s-in-block")
  (v128.const i16x8 0x0 0x1 0x2 0x3 0x4 0x5 0x6 0x7)
)
(assert_return
  (invoke "v128.load8x8_u-in-block")
  (v128.const i16x8 0x1 0x2 0x3 0x4 0x5 0x6 0x7 0x8)
)
(assert_return
  (invoke "v128.load16x4_s-in-block")
  (v128.const i32x4 0x302 0x504 0x706 0x908)
)
(assert_return
  (invoke "v128.load16x4_u-in-block")
  (v128.const i32x4 0x403 0x605 0x807 0xa09)
)
(assert_return
  (invoke "v128.load32x2_s-in-block")
  (v128.const i64x2 0x706_0504 0xb0a_0908)
)
(assert_return
  (invoke "v128.load32x2_u-in-block")
  (v128.const i64x2 0x807_0605 0xc0b_0a09)
)
(assert_return
  (invoke "v128.load8x8_s-as-br-value")
  (v128.const i16x8 0x6 0x7 0x8 0x9 0xa 0xb 0xc 0xd)
)
(assert_return
  (invoke "v128.load8x8_u-as-br-value")
  (v128.const i16x8 0x7 0x8 0x9 0xa 0xb 0xc 0xd 0xe)
)
(assert_return
  (invoke "v128.load16x4_s-as-br-value")
  (v128.const i32x4 0x908 0xb0a 0xd0c 0xf0e)
)
(assert_return
  (invoke "v128.load16x4_u-as-br-value")
  (v128.const i32x4 0xa09 0xc0b 0xe0d 0x800f)
)
(assert_return
  (invoke "v128.load32x2_s-as-br-value")
  (v128.const i64x2 0xd0c_0b0a 0xffff_ffff_8180_0f0e)
)
(assert_return
  (invoke "v128.load32x2_u-as-br-value")
  (v128.const i64x2 0xe0d_0c0b 0x8281_800f)
)
(assert_return (invoke "v128.load8x8_s-extract_lane_s-operand") (i32.const 0xc))
(assert_return (invoke "v128.load8x8_u-extract_lane_s-operand") (i32.const 0xd))
(assert_return
  (invoke "v128.load16x4_s-extract_lane_s-operand")
  (i32.const 0xe)
)
(assert_return
  (invoke "v128.load16x4_u-extract_lane_s-operand")
  (i32.const 0xf)
)
(assert_return
  (invoke "v128.load32x2_s-extract_lane_s-operand")
  (i32.const 0xffff_ff80)
)
(assert_return
  (invoke "v128.load32x2_u-extract_lane_s-operand")
  (i32.const 0xffff_ff81)
)
