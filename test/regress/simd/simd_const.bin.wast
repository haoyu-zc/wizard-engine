(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\80\80\80\80\80\80\80"
  "\80\80\80\80\80\80\80\80\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\80\00\80\00\80\00"
  "\80\00\80\00\80\00\80\00\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\80\00\80\00\80\00"
  "\80\00\80\00\80\00\80\00\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\80\00\80\00\80\00"
  "\80\00\80\00\80\00\80\00\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\39\30\39\30\39\30\39"
  "\30\39\30\39\30\39\30\39\30\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\34\12\34\12\34\12\34"
  "\12\34\12\34\12\34\12\34\12\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\00\00\80\00\00\00"
  "\80\00\00\00\80\00\00\00\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\00\00\80\00\00\00"
  "\80\00\00\00\80\00\00\00\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\00\00\80\00\00\00"
  "\80\00\00\00\80\00\00\00\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\00\00\80\00\00\00"
  "\80\00\00\00\80\00\00\00\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\15\cd\5b\07\15\cd\5b"
  "\07\15\cd\5b\07\15\cd\5b\07\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\df\fb\cf\9a\df\fb\cf"
  "\9a\df\fb\cf\9a\df\fb\cf\9a\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\00\00\00\00\00\00"
  "\80\00\00\00\00\00\00\00\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\00\00\00\00\00\00"
  "\80\00\00\00\00\00\00\00\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\00\00\00\00\00\00"
  "\80\00\00\00\00\00\00\00\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\00\00\00\00\00\00"
  "\80\00\00\00\00\00\00\00\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\15\cd\5b\07\00\00\00"
  "\00\15\cd\5b\07\00\00\00\00\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ef\bc\ef\ad\89\67\25"
  "\01\ef\bc\ef\ad\89\67\25\01\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\00\00\7f\00\00\00"
  "\7f\00\00\00\7f\00\00\00\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\00\00\ff\00\00\00"
  "\ff\00\00\00\ff\00\00\00\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\99\76\96\7e\99\76\96"
  "\7e\99\76\96\7e\99\76\96\7e\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\99\76\96\fe\99\76\96"
  "\fe\99\76\96\fe\99\76\96\fe\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\7f\7f\ff\ff\7f"
  "\7f\ff\ff\7f\7f\ff\ff\7f\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\7f\ff\ff\ff\7f"
  "\ff\ff\ff\7f\ff\ff\ff\7f\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\01\00\80\7f\01\00\80"
  "\7f\01\00\80\7f\01\00\80\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\7f\ff\ff\ff"
  "\7f\ff\ff\ff\7f\ff\ff\ff\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\a3\79\eb\4c\a3\79\eb"
  "\4c\a3\79\eb\4c\a3\79\eb\4c\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\7b\4d\7f\6c\7b\4d\7f"
  "\6c\7b\4d\7f\6c\7b\4d\7f\6c\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\7b\4d\7f\6c\7b\4d\7f"
  "\6c\7b\4d\7f\6c\7b\4d\7f\6c\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\2f\59\2d\ff\2f\59"
  "\2d\ff\2f\59\2d\ff\2f\59\2d\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\a3\79\eb\4c\a3\79\eb"
  "\4c\a3\79\eb\4c\a3\79\eb\4c\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\7b\4d\7f\6c\7b\4d\7f"
  "\6c\7b\4d\7f\6c\7b\4d\7f\6c\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\7b\4d\7f\6c\7b\4d\7f"
  "\6c\7b\4d\7f\6c\7b\4d\7f\6c\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\2f\59\2d\ff\2f\59"
  "\2d\ff\2f\59\2d\ff\2f\59\2d\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\a3\79\eb\4c\a3\79\eb"
  "\4c\a3\79\eb\4c\a3\79\eb\4c\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\7b\4d\7f\6c\7b\4d\7f"
  "\6c\7b\4d\7f\6c\7b\4d\7f\6c\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\7b\4d\7f\6c\7b\4d\7f"
  "\6c\7b\4d\7f\6c\7b\4d\7f\6c\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\2f\59\2d\ff\2f\59"
  "\2d\ff\2f\59\2d\ff\2f\59\2d\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\b4\a2\91\5b\b4\a2\91"
  "\5b\b4\a2\91\5b\b4\a2\91\5b\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\b4\a2\11\65\b4\a2\11"
  "\65\b4\a2\11\65\b4\a2\11\65\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\b4\a2\11\65\b4\a2\11"
  "\65\b4\a2\11\65\b4\a2\11\65\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\b4\a2\11\52\b4\a2\11"
  "\52\b4\a2\11\52\b4\a2\11\52\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\b4\a2\91\5b\b4\a2\91"
  "\5b\b4\a2\91\5b\b4\a2\91\5b\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\b4\a2\11\65\b4\a2\11"
  "\65\b4\a2\11\65\b4\a2\11\65\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\b4\a2\11\65\b4\a2\11"
  "\65\b4\a2\11\65\b4\a2\11\65\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\b4\a2\11\52\b4\a2\11"
  "\52\b4\a2\11\52\b4\a2\11\52\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\b4\a2\91\5b\b4\a2\91"
  "\5b\b4\a2\91\5b\b4\a2\91\5b\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\b4\a2\11\65\b4\a2\11"
  "\65\b4\a2\11\65\b4\a2\11\65\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\b4\a2\11\65\b4\a2\11"
  "\65\b4\a2\11\65\b4\a2\11\65\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\b4\a2\11\52\b4\a2\11"
  "\52\b4\a2\11\52\b4\a2\11\52\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\00\00\00\00\00\e0"
  "\7f\00\00\00\00\00\00\e0\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\00\00\00\00\00\e0"
  "\ff\00\00\00\00\00\00\e0\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\a0\c8\eb\85\f3\cc\e1"
  "\7f\a0\c8\eb\85\f3\cc\e1\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\a0\c8\eb\85\f3\cc\e1"
  "\ff\a0\c8\eb\85\f3\cc\e1\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ef"
  "\7f\ff\ff\ff\ff\ff\ff\ef\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ef"
  "\ff\ff\ff\ff\ff\ff\ff\ef\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\01\00\00\00\00\00\f0"
  "\7f\01\00\00\00\00\00\f0\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\7f\ff\ff\ff\ff\ff\ff\ff\7f\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\00\00\54\34\6f\9d"
  "\41\00\00\00\54\34\6f\9d\41\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\fa\16\5e\5b\af\e9\8f"
  "\45\fa\16\5e\5b\af\e9\8f\45\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\fa\16\5e\5b\af\e9\8f"
  "\45\fa\16\5e\5b\af\e9\8f\45\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\11\43\2b\d6\ff\25\ab"
  "\3d\11\43\2b\d6\ff\25\ab\3d\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\00\00\54\34\6f\9d"
  "\41\00\00\00\54\34\6f\9d\41\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\fa\16\5e\5b\af\e9\8f"
  "\45\fa\16\5e\5b\af\e9\8f\45\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\fa\16\5e\5b\af\e9\8f"
  "\45\fa\16\5e\5b\af\e9\8f\45\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\11\43\2b\d6\ff\25\ab"
  "\3d\11\43\2b\d6\ff\25\ab\3d\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\58\a4\0c\54\34\6f\9d"
  "\41\58\a4\0c\54\34\6f\9d\41\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\d5\cb\6b\5b\af\e9\8f"
  "\45\d5\cb\6b\5b\af\e9\8f\45\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\d5\cb\6b\5b\af\e9\8f"
  "\45\d5\cb\6b\5b\af\e9\8f\45\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\12\ec\36\d6\ff\25\ab"
  "\3d\12\ec\36\d6\ff\25\ab\3d\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\df\bc\9a\78\56\34\f2"
  "\44\df\bc\9a\78\56\34\f2\44\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\df\bc\9a\78\56\34\22"
  "\46\df\bc\9a\78\56\34\22\46\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\df\bc\9a\78\56\34\22"
  "\46\df\bc\9a\78\56\34\22\46\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\df\bc\9a\78\56\34\c2"
  "\43\df\bc\9a\78\56\34\c2\43\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\df\bc\9a\78\56\34\f2"
  "\44\df\bc\9a\78\56\34\f2\44\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\df\bc\9a\78\56\34\22"
  "\46\df\bc\9a\78\56\34\22\46\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\df\bc\9a\78\56\34\22"
  "\46\df\bc\9a\78\56\34\22\46\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\df\bc\9a\78\56\34\c2"
  "\43\df\bc\9a\78\56\34\c2\43\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\df\bc\9a\78\56\34\f2"
  "\44\df\bc\9a\78\56\34\f2\44\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\df\bc\9a\78\56\34\22"
  "\46\df\bc\9a\78\56\34\22\46\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\df\bc\9a\78\56\34\22"
  "\46\df\bc\9a\78\56\34\22\46\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\df\bc\9a\78\56\34\c2"
  "\43\df\bc\9a\78\56\34\c2\43\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\80\80\80\80\80\80\80\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\80\80\80\80\80\80\80\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\80\80\80\80\80\80\80\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\00\ff\00\ff\00\ff"
  "\00\00\80\00\80\00\80\00\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\00\ff\00\ff\ff\ff"
  "\ff\00\80\00\80\00\80\00\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\00\ff\00\ff\ff\ff"
  "\ff\00\80\00\80\00\80\00\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\00\00\00\80\00\00\00\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\00\00\00\80\00\00\00\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\00\00\00\80\00\00\00\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\00\00\7f\00\00\00"
  "\7f\00\00\00\ff\99\76\96\fe\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\00\00\7f\ff\ff\7f"
  "\7f\99\76\96\fe\ff\ff\7f\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\00\c0\7f\00\00\c0"
  "\ff\00\00\80\7f\00\00\80\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\00\00\00\00\00\00\00\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\ff\00\00\00\00\00\00\00\80\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\00\00\00\00\00\e0"
  "\7f\a0\c8\eb\85\f3\cc\e1\ff\1a\0b"
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\84\80\80\80\00\01\60"
  "\00\00\03\82\80\80\80\00\01\00\0a\9b\80\80\80\00"
  "\01\95\80\80\80\00\00\fd\0c\00\00\00\00\00\00\f8"
  "\7f\00\00\00\00\00\00\f0\ff\1a\0b"
)
(module binary "\00\61\73\6d\01\00\00\00\05\83\80\80\80\00\01\00" "\01")
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\80\26\00\00\80\26\00\00\80"
  "\26\00\00\80\26\0b"
)
(assert_return (invoke "f") (v128.const f32x4 0x1p-50 0x1p-50 0x1p-50 0x1p-50))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\80\a6\00\00\80\a6\00\00\80"
  "\a6\00\00\80\a6\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4 -0x1p-50 -0x1p-50 -0x1p-50 -0x1p-50)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\03\00\80\26\03\00\80\26\03\00\80"
  "\26\03\00\80\26\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4
    0x1.0000_06p-50
    0x1.0000_06p-50
    0x1.0000_06p-50
    0x1.0000_06p-50
  )
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\03\00\80\a6\03\00\80\a6\03\00\80"
  "\a6\03\00\80\a6\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4
    -0x1.0000_06p-50
    -0x1.0000_06p-50
    -0x1.0000_06p-50
    -0x1.0000_06p-50
  )
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\80\26\00\00\80\26\00\00\80"
  "\26\00\00\80\26\0b"
)
(assert_return (invoke "f") (v128.const f32x4 0x1p-50 0x1p-50 0x1p-50 0x1p-50))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\80\a6\00\00\80\a6\00\00\80"
  "\a6\00\00\80\a6\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4 -0x1p-50 -0x1p-50 -0x1p-50 -0x1p-50)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\03\00\80\26\03\00\80\26\03\00\80"
  "\26\03\00\80\26\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4
    0x1.0000_06p-50
    0x1.0000_06p-50
    0x1.0000_06p-50
    0x1.0000_06p-50
  )
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\03\00\80\a6\03\00\80\a6\03\00\80"
  "\a6\03\00\80\a6\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4
    -0x1.0000_06p-50
    -0x1.0000_06p-50
    -0x1.0000_06p-50
    -0x1.0000_06p-50
  )
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\80\26\00\00\80\26\00\00\80"
  "\26\00\00\80\26\0b"
)
(assert_return (invoke "f") (v128.const f32x4 0x1p-50 0x1p-50 0x1p-50 0x1p-50))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\80\a6\00\00\80\a6\00\00\80"
  "\a6\00\00\80\a6\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4 -0x1p-50 -0x1p-50 -0x1p-50 -0x1p-50)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\80\26\02\00\80\26\02\00\80"
  "\26\02\00\80\26\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4
    0x1.0000_04p-50
    0x1.0000_04p-50
    0x1.0000_04p-50
    0x1.0000_04p-50
  )
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\80\a6\02\00\80\a6\02\00\80"
  "\a6\02\00\80\a6\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4
    -0x1.0000_04p-50
    -0x1.0000_04p-50
    -0x1.0000_04p-50
    -0x1.0000_04p-50
  )
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\80\58\00\00\80\58\00\00\80"
  "\58\00\00\80\58\0b"
)
(assert_return (invoke "f") (v128.const f32x4 0x1p+50 0x1p+50 0x1p+50 0x1p+50))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\80\d8\00\00\80\d8\00\00\80"
  "\d8\00\00\80\d8\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4 -0x1p+50 -0x1p+50 -0x1p+50 -0x1p+50)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\03\00\80\58\03\00\80\58\03\00\80"
  "\58\03\00\80\58\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4
    0x1.0000_06p+50
    0x1.0000_06p+50
    0x1.0000_06p+50
    0x1.0000_06p+50
  )
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\03\00\80\d8\03\00\80\d8\03\00\80"
  "\d8\03\00\80\d8\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4
    -0x1.0000_06p+50
    -0x1.0000_06p+50
    -0x1.0000_06p+50
    -0x1.0000_06p+50
  )
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\80\58\00\00\80\58\00\00\80"
  "\58\00\00\80\58\0b"
)
(assert_return (invoke "f") (v128.const f32x4 0x1p+50 0x1p+50 0x1p+50 0x1p+50))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\80\d8\00\00\80\d8\00\00\80"
  "\d8\00\00\80\d8\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4 -0x1p+50 -0x1p+50 -0x1p+50 -0x1p+50)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\80\58\02\00\80\58\02\00\80"
  "\58\02\00\80\58\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4
    0x1.0000_04p+50
    0x1.0000_04p+50
    0x1.0000_04p+50
    0x1.0000_04p+50
  )
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\80\d8\02\00\80\d8\02\00\80"
  "\d8\02\00\80\d8\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4
    -0x1.0000_04p+50
    -0x1.0000_04p+50
    -0x1.0000_04p+50
    -0x1.0000_04p+50
  )
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\80\58\00\00\80\58\00\00\80"
  "\58\00\00\80\58\0b"
)
(assert_return (invoke "f") (v128.const f32x4 0x1p+50 0x1p+50 0x1p+50 0x1p+50))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\80\d8\00\00\80\d8\00\00\80"
  "\d8\00\00\80\d8\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4 -0x1p+50 -0x1p+50 -0x1p+50 -0x1p+50)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\80\58\02\00\80\58\02\00\80"
  "\58\02\00\80\58\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4
    0x1.0000_04p+50
    0x1.0000_04p+50
    0x1.0000_04p+50
    0x1.0000_04p+50
  )
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\80\d8\02\00\80\d8\02\00\80"
  "\d8\02\00\80\d8\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4
    -0x1.0000_04p+50
    -0x1.0000_04p+50
    -0x1.0000_04p+50
    -0x1.0000_04p+50
  )
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\0b"
)
(assert_return (invoke "f") (v128.const f32x4 0x0p+0 0x0p+0 0x0p+0 0x0p+0))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\00\80\00\00\00\80\00\00\00"
  "\80\00\00\00\80\0b"
)
(assert_return (invoke "f") (v128.const f32x4 -0x0p+0 -0x0p+0 -0x0p+0 -0x0p+0))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\03\00\00\00\03\00\00\00\03\00\00"
  "\00\03\00\00\00\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4 0x1.8p-148 0x1.8p-148 0x1.8p-148 0x1.8p-148)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\03\00\00\80\03\00\00\80\03\00\00"
  "\80\03\00\00\80\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4 -0x1.8p-148 -0x1.8p-148 -0x1.8p-148 -0x1.8p-148)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\ff\ff\7f\7f\ff\ff\7f\7f\ff\ff\7f"
  "\7f\ff\ff\7f\7f\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4
    0x1.ffff_fep+127
    0x1.ffff_fep+127
    0x1.ffff_fep+127
    0x1.ffff_fep+127
  )
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\ff\ff\7f\ff\ff\ff\7f\ff\ff\ff\7f"
  "\ff\ff\ff\7f\ff\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4
    -0x1.ffff_fep+127
    -0x1.ffff_fep+127
    -0x1.ffff_fep+127
    -0x1.ffff_fep+127
  )
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\ff\ff\7f\7f\ff\ff\7f\7f\ff\ff\7f"
  "\7f\ff\ff\7f\7f\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4
    0x1.ffff_fep+127
    0x1.ffff_fep+127
    0x1.ffff_fep+127
    0x1.ffff_fep+127
  )
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\ff\ff\7f\ff\ff\ff\7f\ff\ff\ff\7f"
  "\ff\ff\ff\7f\ff\0b"
)
(assert_return
  (invoke "f")
  (v128.const f32x4
    -0x1.ffff_fep+127
    -0x1.ffff_fep+127
    -0x1.ffff_fep+127
    -0x1.ffff_fep+127
  )
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\03\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_3p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\03\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_3p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_1p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_2p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\03\00\00\00\00\00\70\1a\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_3p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\03\00\00\00\00\00\70\9a\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_3p-600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\60\7e\0b"
)
(assert_return (invoke "f") (f64.const 0x1p+999))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\00\60\fe\0b"
)
(assert_return (invoke "f") (f64.const -0x1p+999))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\60\7e\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_1p+999))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\60\fe\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_1p+999))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\60\7e\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_1p+999))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\01\00\00\00\00\00\60\fe\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_1p+999))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\60\7e\0b"
)
(assert_return (invoke "f") (f64.const 0x1.0000_0000_0000_2p+999))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7c\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\91\80\80\80\00\01\8b\80\80"
  "\80\00\00\44\02\00\00\00\00\00\60\fe\0b"
)
(assert_return (invoke "f") (f64.const -0x1.0000_0000_0000_2p+999))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\00\00\00\00\70\65\00\00\00"
  "\00\00\00\70\65\0b"
)
(assert_return (invoke "f") (v128.const f64x2 0x1p+600 0x1p+600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\00\00\00\00\70\e5\00\00\00"
  "\00\00\00\70\e5\0b"
)
(assert_return (invoke "f") (v128.const f64x2 -0x1p+600 -0x1p+600))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\70\65\01\00\00"
  "\00\00\00\70\65\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_1p+600 0x1.0000_0000_0000_1p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\70\e5\01\00\00"
  "\00\00\00\70\e5\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_1p+600 -0x1.0000_0000_0000_1p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\70\65\01\00\00"
  "\00\00\00\70\65\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_1p+600 0x1.0000_0000_0000_1p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\70\e5\01\00\00"
  "\00\00\00\70\e5\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_1p+600 -0x1.0000_0000_0000_1p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\70\65\01\00\00"
  "\00\00\00\70\65\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_1p+600 0x1.0000_0000_0000_1p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\70\e5\01\00\00"
  "\00\00\00\70\e5\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_1p+600 -0x1.0000_0000_0000_1p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\70\65\01\00\00"
  "\00\00\00\70\65\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_1p+600 0x1.0000_0000_0000_1p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\70\e5\01\00\00"
  "\00\00\00\70\e5\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_1p+600 -0x1.0000_0000_0000_1p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\70\65\01\00\00"
  "\00\00\00\70\65\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_1p+600 0x1.0000_0000_0000_1p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\70\e5\01\00\00"
  "\00\00\00\70\e5\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_1p+600 -0x1.0000_0000_0000_1p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\70\65\02\00\00"
  "\00\00\00\70\65\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_2p+600 0x1.0000_0000_0000_2p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\70\e5\02\00\00"
  "\00\00\00\70\e5\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_2p+600 -0x1.0000_0000_0000_2p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\70\65\02\00\00"
  "\00\00\00\70\65\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_2p+600 0x1.0000_0000_0000_2p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\70\e5\02\00\00"
  "\00\00\00\70\e5\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_2p+600 -0x1.0000_0000_0000_2p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\70\65\02\00\00"
  "\00\00\00\70\65\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_2p+600 0x1.0000_0000_0000_2p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\70\e5\02\00\00"
  "\00\00\00\70\e5\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_2p+600 -0x1.0000_0000_0000_2p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\70\65\02\00\00"
  "\00\00\00\70\65\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_2p+600 0x1.0000_0000_0000_2p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\70\e5\02\00\00"
  "\00\00\00\70\e5\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_2p+600 -0x1.0000_0000_0000_2p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\70\65\02\00\00"
  "\00\00\00\70\65\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_2p+600 0x1.0000_0000_0000_2p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\70\e5\02\00\00"
  "\00\00\00\70\e5\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_2p+600 -0x1.0000_0000_0000_2p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\70\65\02\00\00"
  "\00\00\00\70\65\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_2p+600 0x1.0000_0000_0000_2p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\70\e5\02\00\00"
  "\00\00\00\70\e5\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_2p+600 -0x1.0000_0000_0000_2p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\70\65\02\00\00"
  "\00\00\00\70\65\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_2p+600 0x1.0000_0000_0000_2p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\70\e5\02\00\00"
  "\00\00\00\70\e5\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_2p+600 -0x1.0000_0000_0000_2p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\03\00\00\00\00\00\70\65\03\00\00"
  "\00\00\00\70\65\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_3p+600 0x1.0000_0000_0000_3p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\03\00\00\00\00\00\70\e5\03\00\00"
  "\00\00\00\70\e5\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_3p+600 -0x1.0000_0000_0000_3p+600)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\00\00\00\00\00\46\00\00\00"
  "\00\00\00\00\46\0b"
)
(assert_return (invoke "f") (v128.const f64x2 0x1p+97 0x1p+97))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\00\00\00\00\00\c6\00\00\00"
  "\00\00\00\00\c6\0b"
)
(assert_return (invoke "f") (v128.const f64x2 -0x1p+97 -0x1p+97))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\46\01\00\00"
  "\00\00\00\00\46\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_1p+97 0x1.0000_0000_0000_1p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\c6\01\00\00"
  "\00\00\00\00\c6\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_1p+97 -0x1.0000_0000_0000_1p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\46\01\00\00"
  "\00\00\00\00\46\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_1p+97 0x1.0000_0000_0000_1p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\c6\01\00\00"
  "\00\00\00\00\c6\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_1p+97 -0x1.0000_0000_0000_1p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\46\01\00\00"
  "\00\00\00\00\46\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_1p+97 0x1.0000_0000_0000_1p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\c6\01\00\00"
  "\00\00\00\00\c6\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_1p+97 -0x1.0000_0000_0000_1p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\46\01\00\00"
  "\00\00\00\00\46\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_1p+97 0x1.0000_0000_0000_1p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\c6\01\00\00"
  "\00\00\00\00\c6\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_1p+97 -0x1.0000_0000_0000_1p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\46\01\00\00"
  "\00\00\00\00\46\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_1p+97 0x1.0000_0000_0000_1p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\c6\01\00\00"
  "\00\00\00\00\c6\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_1p+97 -0x1.0000_0000_0000_1p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\46\02\00\00"
  "\00\00\00\00\46\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_2p+97 0x1.0000_0000_0000_2p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\c6\02\00\00"
  "\00\00\00\00\c6\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_2p+97 -0x1.0000_0000_0000_2p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\46\02\00\00"
  "\00\00\00\00\46\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_2p+97 0x1.0000_0000_0000_2p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\c6\02\00\00"
  "\00\00\00\00\c6\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_2p+97 -0x1.0000_0000_0000_2p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\46\02\00\00"
  "\00\00\00\00\46\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_2p+97 0x1.0000_0000_0000_2p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\c6\02\00\00"
  "\00\00\00\00\c6\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_2p+97 -0x1.0000_0000_0000_2p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\46\02\00\00"
  "\00\00\00\00\46\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_2p+97 0x1.0000_0000_0000_2p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\c6\02\00\00"
  "\00\00\00\00\c6\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_2p+97 -0x1.0000_0000_0000_2p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\46\02\00\00"
  "\00\00\00\00\46\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_2p+97 0x1.0000_0000_0000_2p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\c6\02\00\00"
  "\00\00\00\00\c6\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_2p+97 -0x1.0000_0000_0000_2p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\46\02\00\00"
  "\00\00\00\00\46\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_2p+97 0x1.0000_0000_0000_2p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\c6\02\00\00"
  "\00\00\00\00\c6\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_2p+97 -0x1.0000_0000_0000_2p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\46\02\00\00"
  "\00\00\00\00\46\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_2p+97 0x1.0000_0000_0000_2p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\c6\02\00\00"
  "\00\00\00\00\c6\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_2p+97 -0x1.0000_0000_0000_2p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\03\00\00\00\00\00\00\46\03\00\00"
  "\00\00\00\00\46\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_3p+97 0x1.0000_0000_0000_3p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\03\00\00\00\00\00\00\c6\03\00\00"
  "\00\00\00\00\c6\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_3p+97 -0x1.0000_0000_0000_3p+97)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\00\00\00\00\b0\43\00\00\00"
  "\00\00\00\b0\43\0b"
)
(assert_return (invoke "f") (v128.const f64x2 0x1p+60 0x1p+60))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\00\00\00\00\b0\c3\00\00\00"
  "\00\00\00\b0\c3\0b"
)
(assert_return (invoke "f") (v128.const f64x2 -0x1p+60 -0x1p+60))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\b0\43\01\00\00"
  "\00\00\00\b0\43\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_1p+60 0x1.0000_0000_0000_1p+60)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\b0\c3\01\00\00"
  "\00\00\00\b0\c3\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_1p+60 -0x1.0000_0000_0000_1p+60)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\b0\43\01\00\00"
  "\00\00\00\b0\43\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_1p+60 0x1.0000_0000_0000_1p+60)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\b0\c3\01\00\00"
  "\00\00\00\b0\c3\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_1p+60 -0x1.0000_0000_0000_1p+60)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\b0\43\02\00\00"
  "\00\00\00\b0\43\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_2p+60 0x1.0000_0000_0000_2p+60)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\b0\c3\02\00\00"
  "\00\00\00\b0\c3\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_2p+60 -0x1.0000_0000_0000_2p+60)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\0b"
)
(assert_return (invoke "f") (v128.const f64x2 0x0p+0 0x0p+0))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\00\00\00\00\00\00\00\80\00\00\00"
  "\00\00\00\00\80\0b"
)
(assert_return (invoke "f") (v128.const f64x2 -0x0p+0 -0x0p+0))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\00\01\00\00"
  "\00\00\00\00\00\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x0.0000_0000_0000_1p-1022 0x0.0000_0000_0000_1p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\80\01\00\00"
  "\00\00\00\00\80\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x0.0000_0000_0000_1p-1022 -0x0.0000_0000_0000_1p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\00\01\00\00"
  "\00\00\00\00\00\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x0.0000_0000_0000_1p-1022 0x0.0000_0000_0000_1p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\80\01\00\00"
  "\00\00\00\00\80\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x0.0000_0000_0000_1p-1022 -0x0.0000_0000_0000_1p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\00\01\00\00"
  "\00\00\00\00\00\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x0.0000_0000_0000_1p-1022 0x0.0000_0000_0000_1p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\80\01\00\00"
  "\00\00\00\00\80\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x0.0000_0000_0000_1p-1022 -0x0.0000_0000_0000_1p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\00\01\00\00"
  "\00\00\00\00\00\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x0.0000_0000_0000_1p-1022 0x0.0000_0000_0000_1p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\80\01\00\00"
  "\00\00\00\00\80\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x0.0000_0000_0000_1p-1022 -0x0.0000_0000_0000_1p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\00\01\00\00"
  "\00\00\00\00\00\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x0.0000_0000_0000_1p-1022 0x0.0000_0000_0000_1p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\01\00\00\00\00\00\00\80\01\00\00"
  "\00\00\00\00\80\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x0.0000_0000_0000_1p-1022 -0x0.0000_0000_0000_1p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\00\02\00\00"
  "\00\00\00\00\00\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x0.0000_0000_0000_2p-1022 0x0.0000_0000_0000_2p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\80\02\00\00"
  "\00\00\00\00\80\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x0.0000_0000_0000_2p-1022 -0x0.0000_0000_0000_2p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\00\02\00\00"
  "\00\00\00\00\00\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x0.0000_0000_0000_2p-1022 0x0.0000_0000_0000_2p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\80\02\00\00"
  "\00\00\00\00\80\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x0.0000_0000_0000_2p-1022 -0x0.0000_0000_0000_2p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\00\02\00\00"
  "\00\00\00\00\00\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x0.0000_0000_0000_2p-1022 0x0.0000_0000_0000_2p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\80\02\00\00"
  "\00\00\00\00\80\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x0.0000_0000_0000_2p-1022 -0x0.0000_0000_0000_2p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\00\02\00\00"
  "\00\00\00\00\00\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x0.0000_0000_0000_2p-1022 0x0.0000_0000_0000_2p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\80\02\00\00"
  "\00\00\00\00\80\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x0.0000_0000_0000_2p-1022 -0x0.0000_0000_0000_2p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\00\02\00\00"
  "\00\00\00\00\00\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x0.0000_0000_0000_2p-1022 0x0.0000_0000_0000_2p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\80\02\00\00"
  "\00\00\00\00\80\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x0.0000_0000_0000_2p-1022 -0x0.0000_0000_0000_2p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\00\02\00\00"
  "\00\00\00\00\00\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x0.0000_0000_0000_2p-1022 0x0.0000_0000_0000_2p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\80\02\00\00"
  "\00\00\00\00\80\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x0.0000_0000_0000_2p-1022 -0x0.0000_0000_0000_2p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\00\02\00\00"
  "\00\00\00\00\00\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x0.0000_0000_0000_2p-1022 0x0.0000_0000_0000_2p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\02\00\00\00\00\00\00\80\02\00\00"
  "\00\00\00\00\80\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x0.0000_0000_0000_2p-1022 -0x0.0000_0000_0000_2p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\03\00\00\00\00\00\10\00\03\00\00"
  "\00\00\00\10\00\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.0000_0000_0000_3p-1022 0x1.0000_0000_0000_3p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\03\00\00\00\00\00\10\80\03\00\00"
  "\00\00\00\10\80\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.0000_0000_0000_3p-1022 -0x1.0000_0000_0000_3p-1022)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ef\7f\ff\ff\ff"
  "\ff\ff\ff\ef\7f\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.ffff_ffff_ffff_fp+1023 0x1.ffff_ffff_ffff_fp+1023)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ef\ff\ff\ff\ff"
  "\ff\ff\ff\ef\ff\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.ffff_ffff_ffff_fp+1023 -0x1.ffff_ffff_ffff_fp+1023)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ef\7f\ff\ff\ff"
  "\ff\ff\ff\ef\7f\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 0x1.ffff_ffff_ffff_fp+1023 0x1.ffff_ffff_ffff_fp+1023)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\85\80\80\80"
  "\00\01\01\66\00\00\0a\9a\80\80\80\00\01\94\80\80"
  "\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ef\ff\ff\ff\ff"
  "\ff\ff\ff\ef\ff\0b"
)
(assert_return
  (invoke "f")
  (v128.const f64x2 -0x1.ffff_ffff_ffff_fp+1023 -0x1.ffff_ffff_ffff_fp+1023)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\8f\80\80\80\00\03\60"
  "\03\7b\7b\7b\01\7b\60\00\01\7b\60\00\00\03\97\80"
  "\80\80\00\16\01\01\01\01\01\00\01\01\01\02\01\01"
  "\01\01\01\00\01\01\01\01\01\02\04\85\80\80\80\00"
  "\01\70\01\02\02\05\83\80\80\80\00\01\00\01\07\ff"
  "\82\80\80\00\14\0c\61\73\2d\62\72\2d\72\65\74\76"
  "\61\6c\00\00\0f\61\73\2d\62\72\5f\69\66\2d\72\65"
  "\74\76\61\6c\00\01\10\61\73\2d\72\65\74\75\72\6e"
  "\2d\72\65\74\76\61\6c\00\02\11\61\73\2d\69\66\2d"
  "\74\68\65\6e\2d\72\65\74\76\61\6c\00\03\11\61\73"
  "\2d\69\66\2d\65\6c\73\65\2d\72\65\74\76\61\6c\00"
  "\04\0d\61\73\2d\63\61\6c\6c\2d\70\61\72\61\6d\00"
  "\06\0f\61\73\2d\62\6c\6f\63\6b\2d\72\65\74\76\61"
  "\6c\00\07\0e\61\73\2d\6c\6f\6f\70\2d\72\65\74\76"
  "\61\6c\00\08\0f\61\73\2d\64\72\6f\70\2d\6f\70\65"
  "\72\61\6e\64\00\09\0d\61\73\2d\62\72\2d\72\65\74"
  "\76\61\6c\32\00\0a\10\61\73\2d\62\72\5f\69\66\2d"
  "\72\65\74\76\61\6c\32\00\0b\11\61\73\2d\72\65\74"
  "\75\72\6e\2d\72\65\74\76\61\6c\32\00\0c\12\61\73"
  "\2d\69\66\2d\74\68\65\6e\2d\72\65\74\76\61\6c\32"
  "\00\0d\12\61\73\2d\69\66\2d\65\6c\73\65\2d\72\65"
  "\74\76\61\6c\32\00\0e\0e\61\73\2d\63\61\6c\6c\2d"
  "\70\61\72\61\6d\32\00\10\16\61\73\2d\63\61\6c\6c"
  "\5f\69\6e\64\69\72\65\63\74\2d\70\61\72\61\6d\00"
  "\11\17\61\73\2d\63\61\6c\6c\5f\69\6e\64\69\72\65"
  "\63\74\2d\70\61\72\61\6d\32\00\12\10\61\73\2d\62"
  "\6c\6f\63\6b\2d\72\65\74\76\61\6c\32\00\13\0f\61"
  "\73\2d\6c\6f\6f\70\2d\72\65\74\76\61\6c\32\00\14"
  "\10\61\73\2d\64\72\6f\70\2d\6f\70\65\72\61\6e\64"
  "\32\00\15\09\88\80\80\80\00\01\00\41\00\0b\02\05"
  "\0f\0a\cd\86\80\80\00\16\99\80\80\80\00\00\02\7b"
  "\fd\0c\00\01\02\03\04\05\06\07\08\09\0a\0b\0c\0d"
  "\0e\0f\0c\00\0b\0b\9b\80\80\80\00\00\02\7b\fd\0c"
  "\00\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00"
  "\41\01\0d\00\0b\0b\95\80\80\80\00\00\fd\0c\00\00"
  "\00\00\01\00\00\00\02\00\00\00\03\00\00\00\0f\0b"
  "\ac\80\80\80\00\00\41\01\04\7b\fd\0c\00\00\00\00"
  "\01\00\00\00\02\00\00\00\03\00\00\00\05\fd\0c\03"
  "\00\00\00\02\00\00\00\01\00\00\00\00\00\00\00\0b"
  "\0b\ac\80\80\80\00\00\41\00\04\7b\fd\0c\00\00\00"
  "\00\01\00\00\00\02\00\00\00\03\00\00\00\05\fd\0c"
  "\03\00\00\00\02\00\00\00\01\00\00\00\00\00\00\00"
  "\0b\0b\94\80\80\80\00\00\fd\0c\00\00\00\00\01\00"
  "\00\00\02\00\00\00\03\00\00\00\0b\ba\80\80\80\00"
  "\00\fd\0c\00\00\00\00\01\00\00\00\02\00\00\00\03"
  "\00\00\00\fd\0c\00\00\00\00\01\00\00\00\02\00\00"
  "\00\03\00\00\00\fd\0c\00\00\00\00\01\00\00\00\02"
  "\00\00\00\03\00\00\00\10\05\0b\97\80\80\80\00\00"
  "\02\7b\fd\0c\00\00\00\00\01\00\00\00\02\00\00\00"
  "\03\00\00\00\0b\0b\97\80\80\80\00\00\03\7b\fd\0c"
  "\00\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00"
  "\0b\0b\95\80\80\80\00\00\fd\0c\00\00\00\00\01\00"
  "\00\00\02\00\00\00\03\00\00\00\1a\0b\99\80\80\80"
  "\00\00\02\7b\fd\0c\04\05\06\07\00\01\02\03\0c\0d"
  "\0e\0f\08\09\0a\0b\0c\00\0b\0b\9b\80\80\80\00\00"
  "\02\7b\fd\0c\00\00\00\00\00\00\00\00\01\00\00\00"
  "\00\00\00\00\41\01\0d\00\0b\0b\95\80\80\80\00\00"
  "\fd\0c\00\00\00\00\00\00\00\00\01\00\00\00\00\00"
  "\00\00\0f\0b\ac\80\80\80\00\00\41\01\04\7b\fd\0c"
  "\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00"
  "\05\fd\0c\01\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\0b\0b\ac\80\80\80\00\00\41\00\04\7b\fd"
  "\0c\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00"
  "\00\05\fd\0c\01\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\0b\0b\94\80\80\80\00\00\fd\0c\00\00"
  "\00\00\00\00\00\00\01\00\00\00\00\00\00\00\0b\ba"
  "\80\80\80\00\00\fd\0c\00\00\00\00\00\00\00\00\01"
  "\00\00\00\00\00\00\00\fd\0c\00\00\00\00\00\00\00"
  "\00\01\00\00\00\00\00\00\00\fd\0c\00\00\00\00\00"
  "\00\00\00\01\00\00\00\00\00\00\00\10\0f\0b\bd\80"
  "\80\80\00\00\fd\0c\00\00\00\00\01\00\00\00\02\00"
  "\00\00\03\00\00\00\fd\0c\00\00\00\00\01\00\00\00"
  "\02\00\00\00\03\00\00\00\fd\0c\00\00\00\00\01\00"
  "\00\00\02\00\00\00\03\00\00\00\41\00\11\00\00\0b"
  "\bd\80\80\80\00\00\fd\0c\00\00\00\00\00\00\00\00"
  "\01\00\00\00\00\00\00\00\fd\0c\00\00\00\00\00\00"
  "\00\00\01\00\00\00\00\00\00\00\fd\0c\00\00\00\00"
  "\00\00\00\00\01\00\00\00\00\00\00\00\41\01\11\00"
  "\00\0b\97\80\80\80\00\00\02\7b\fd\0c\00\00\00\00"
  "\00\00\00\00\01\00\00\00\00\00\00\00\0b\0b\97\80"
  "\80\80\00\00\03\7b\fd\0c\00\00\00\00\00\00\00\00"
  "\01\00\00\00\00\00\00\00\0b\0b\95\80\80\80\00\00"
  "\fd\0c\00\00\00\00\00\00\00\00\01\00\00\00\00\00"
  "\00\00\1a\0b"
)
(assert_return
  (invoke "as-br-retval")
  (v128.const i32x4 0x302_0100 0x706_0504 0xb0a_0908 0xf0e_0d0c)
)
(assert_return (invoke "as-br_if-retval") (v128.const i32x4 0x0 0x1 0x2 0x3))
(assert_return (invoke "as-return-retval") (v128.const i32x4 0x0 0x1 0x2 0x3))
(assert_return (invoke "as-if-then-retval") (v128.const i32x4 0x0 0x1 0x2 0x3))
(assert_return (invoke "as-if-else-retval") (v128.const i32x4 0x3 0x2 0x1 0x0))
(assert_return (invoke "as-call-param") (v128.const i32x4 0x0 0x1 0x2 0x3))
(assert_return
  (invoke "as-call_indirect-param")
  (v128.const i32x4 0x0 0x1 0x2 0x3)
)
(assert_return (invoke "as-block-retval") (v128.const i32x4 0x0 0x1 0x2 0x3))
(assert_return (invoke "as-loop-retval") (v128.const i32x4 0x0 0x1 0x2 0x3))
(assert_return (invoke "as-drop-operand"))
(assert_return
  (invoke "as-br-retval2")
  (v128.const i64x2 0x302_0100_0706_0504 0xb0a_0908_0f0e_0d0c)
)
(assert_return (invoke "as-br_if-retval2") (v128.const i64x2 0x0 0x1))
(assert_return (invoke "as-return-retval2") (v128.const i64x2 0x0 0x1))
(assert_return (invoke "as-if-then-retval2") (v128.const i64x2 0x0 0x1))
(assert_return (invoke "as-if-else-retval2") (v128.const i64x2 0x1 0x0))
(assert_return (invoke "as-call-param2") (v128.const i64x2 0x0 0x1))
(assert_return (invoke "as-call_indirect-param2") (v128.const i64x2 0x0 0x1))
(assert_return (invoke "as-block-retval2") (v128.const i64x2 0x0 0x1))
(assert_return (invoke "as-loop-retval2") (v128.const i64x2 0x0 0x1))
(assert_return (invoke "as-drop-operand2"))
(module binary
  "\00\61\73\6d\01\00\00\00\01\8a\80\80\80\00\02\60"
  "\01\7b\01\7b\60\00\01\7b\03\85\80\80\80\00\04\00"
  "\00\00\01\05\83\80\80\80\00\01\00\01\07\ed\80\80"
  "\80\00\04\1a\61\73\2d\6c\6f\63\61\6c\2e\73\65\74"
  "\2f\67\65\74\2d\76\61\6c\75\65\5f\30\5f\30\00\00"
  "\1a\61\73\2d\6c\6f\63\61\6c\2e\73\65\74\2f\67\65"
  "\74\2d\76\61\6c\75\65\5f\30\5f\31\00\01\1a\61\73"
  "\2d\6c\6f\63\61\6c\2e\73\65\74\2f\67\65\74\2d\76"
  "\61\6c\75\65\5f\33\5f\30\00\02\12\61\73\2d\6c\6f"
  "\63\61\6c\2e\74\65\65\2d\76\61\6c\75\65\00\03\0a"
  "\e3\80\80\80\00\04\8a\80\80\80\00\01\04\7b\20\00"
  "\21\00\20\00\0b\96\80\80\80\00\01\04\7b\20\00\21"
  "\00\20\00\21\01\20\01\21\02\20\02\21\03\20\00\0b"
  "\96\80\80\80\00\01\04\7b\20\00\21\00\20\00\21\01"
  "\20\01\21\02\20\02\21\03\20\03\0b\98\80\80\80\00"
  "\01\01\7b\fd\0c\00\00\00\00\01\00\00\00\02\00\00"
  "\00\03\00\00\00\22\00\0b"
)
(assert_return
  (invoke "as-local.set/get-value_0_0" (v128.const i32x4 0x0 0x0 0x0 0x0))
  (v128.const i32x4 0x0 0x0 0x0 0x0)
)
(assert_return
  (invoke "as-local.set/get-value_0_1" (v128.const i32x4 0x1 0x1 0x1 0x1))
  (v128.const i32x4 0x1 0x1 0x1 0x1)
)
(assert_return
  (invoke "as-local.set/get-value_3_0" (v128.const i32x4 0x2 0x2 0x2 0x2))
  (v128.const i32x4 0x2 0x2 0x2 0x2)
)
(assert_return (invoke "as-local.tee-value") (v128.const i32x4 0x0 0x1 0x2 0x3))
(module binary
  "\00\61\73\6d\01\00\00\00\01\95\80\80\80\00\04\60"
  "\01\7b\00\60\02\7b\7b\00\60\04\7b\7b\7b\7b\00\60"
  "\00\01\7b\03\88\80\80\80\00\07\00\01\02\03\03\03"
  "\03\05\83\80\80\80\00\01\00\01\06\ea\80\80\80\00"
  "\05\7b\01\fd\0c\00\00\00\00\01\00\00\00\02\00\00"
  "\00\03\00\00\00\0b\7b\01\fd\0c\04\00\00\00\05\00"
  "\00\00\06\00\00\00\07\00\00\00\0b\7b\01\fd\0c\08"
  "\00\00\00\09\00\00\00\0a\00\00\00\0b\00\00\00\0b"
  "\7b\01\fd\0c\0c\00\00\00\0d\00\00\00\0e\00\00\00"
  "\0f\00\00\00\0b\7b\01\fd\0c\10\00\00\00\11\00\00"
  "\00\12\00\00\00\13\00\00\00\0b\07\9f\81\80\80\00"
  "\07\17\61\73\2d\67\6c\6f\62\61\6c\2e\73\65\74\5f"
  "\76\61\6c\75\65\5f\24\67\30\00\00\1b\61\73\2d\67"
  "\6c\6f\62\61\6c\2e\73\65\74\5f\76\61\6c\75\65\5f"
  "\24\67\31\5f\24\67\32\00\01\23\61\73\2d\67\6c\6f"
  "\62\61\6c\2e\73\65\74\5f\76\61\6c\75\65\5f\24\67"
  "\30\5f\24\67\31\5f\24\67\32\5f\24\67\33\00\02\0d"
  "\67\6c\6f\62\61\6c\2e\67\65\74\5f\67\30\00\03\0d"
  "\67\6c\6f\62\61\6c\2e\67\65\74\5f\67\31\00\04\0d"
  "\67\6c\6f\62\61\6c\2e\67\65\74\5f\67\32\00\05\0d"
  "\67\6c\6f\62\61\6c\2e\67\65\74\5f\67\33\00\06\0a"
  "\d4\80\80\80\00\07\86\80\80\80\00\00\20\00\24\00"
  "\0b\8a\80\80\80\00\00\20\00\24\01\20\01\24\02\0b"
  "\90\80\80\80\00\00\20\00\10\00\20\01\20\02\10\01"
  "\20\03\24\03\0b\84\80\80\80\00\00\23\00\0b\84\80"
  "\80\80\00\00\23\01\0b\84\80\80\80\00\00\23\02\0b"
  "\84\80\80\80\00\00\23\03\0b"
)
(assert_return
  (invoke "as-global.set_value_$g0_$g1_$g2_$g3"
    (v128.const i32x4 0x1 0x1 0x1 0x1)
    (v128.const i32x4 0x2 0x2 0x2 0x2)
    (v128.const i32x4 0x3 0x3 0x3 0x3)
    (v128.const i32x4 0x4 0x4 0x4 0x4)
  )
)
(assert_return (invoke "global.get_g0") (v128.const i32x4 0x1 0x1 0x1 0x1))
(assert_return (invoke "global.get_g1") (v128.const i32x4 0x2 0x2 0x2 0x2))
(assert_return (invoke "global.get_g2") (v128.const i32x4 0x3 0x3 0x3 0x3))
(assert_return (invoke "global.get_g3") (v128.const i32x4 0x4 0x4 0x4 0x4))
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\97\80\80\80\00\16\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\07\eb\82\80\80\00\16\0a\69\33\32\78\34\2e\74\65"
  "\73\74\00\00\0a\69\33\32\78\34\2e\73\6d\61\78\00"
  "\01\0e\69\33\32\78\34\2e\6e\65\67\5f\73\6d\61\78"
  "\00\02\0e\69\33\32\78\34\2e\69\6e\63\5f\73\6d\69"
  "\6e\00\03\0e\69\33\32\78\34\2e\6e\65\67\5f\7a\65"
  "\72\6f\00\04\0f\69\33\32\78\34\2e\6e\6f\74\5f\6f"
  "\63\74\61\6c\00\05\0f\69\33\32\78\34\2e\70\6c\75"
  "\73\5f\73\69\67\6e\00\06\0e\69\33\32\78\34\2d\64"
  "\65\63\2d\73\65\70\31\00\07\0e\69\33\32\78\34\2d"
  "\64\65\63\2d\73\65\70\32\00\08\0e\69\33\32\78\34"
  "\2d\68\65\78\2d\73\65\70\31\00\09\0e\69\33\32\78"
  "\34\2d\68\65\78\2d\73\65\70\32\00\0a\0a\69\36\34"
  "\78\32\2e\74\65\73\74\00\0b\0a\69\36\34\78\32\2e"
  "\73\6d\61\78\00\0c\0e\69\36\34\78\32\2e\6e\65\67"
  "\5f\73\6d\61\78\00\0d\0e\69\36\34\78\32\2e\69\6e"
  "\63\5f\73\6d\69\6e\00\0e\0e\69\36\34\78\32\2e\6e"
  "\65\67\5f\7a\65\72\6f\00\0f\0f\69\36\34\78\32\2e"
  "\6e\6f\74\5f\6f\63\74\61\6c\00\10\0f\69\36\34\78"
  "\32\2e\70\6c\75\73\5f\73\69\67\6e\00\11\0e\69\36"
  "\34\78\32\2d\64\65\63\2d\73\65\70\31\00\12\0e\69"
  "\36\34\78\32\2d\64\65\63\2d\73\65\70\32\00\13\0e"
  "\69\36\34\78\32\2d\68\65\78\2d\73\65\70\31\00\14"
  "\0e\69\36\34\78\32\2d\68\65\78\2d\73\65\70\32\00"
  "\15\0a\df\84\80\80\00\16\95\80\80\80\00\00\fd\0c"
  "\0d\d0\ad\0b\0d\d0\ad\0b\0d\d0\ad\0b\0d\d0\ad\0b"
  "\0f\0b\95\80\80\80\00\00\fd\0c\ff\ff\ff\7f\ff\ff"
  "\ff\7f\ff\ff\ff\7f\ff\ff\ff\7f\0f\0b\95\80\80\80"
  "\00\00\fd\0c\01\00\00\80\01\00\00\80\01\00\00\80"
  "\01\00\00\80\0f\0b\aa\80\80\80\00\00\fd\0c\00\00"
  "\00\80\00\00\00\80\00\00\00\80\00\00\00\80\fd\0c"
  "\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00"
  "\fd\ae\01\0f\0b\95\80\80\80\00\00\fd\0c\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\0f\0b\95"
  "\80\80\80\00\00\fd\0c\0a\00\00\00\0a\00\00\00\0a"
  "\00\00\00\0a\00\00\00\0f\0b\95\80\80\80\00\00\fd"
  "\0c\2a\00\00\00\2a\00\00\00\2a\00\00\00\2a\00\00"
  "\00\0f\0b\94\80\80\80\00\00\fd\0c\40\42\0f\00\40"
  "\42\0f\00\40\42\0f\00\40\42\0f\00\0b\94\80\80\80"
  "\00\00\fd\0c\e8\03\00\00\e8\03\00\00\e8\03\00\00"
  "\e8\03\00\00\0b\94\80\80\80\00\00\fd\0c\99\00\0f"
  "\0a\99\00\0f\0a\99\00\0f\0a\99\00\0f\0a\0b\94\80"
  "\80\80\00\00\fd\0c\0f\aa\01\00\0f\aa\01\00\0f\aa"
  "\01\00\0f\aa\01\00\0b\95\80\80\80\00\00\fd\0c\0d"
  "\d0\ad\0b\0d\d0\ad\0b\0d\d0\ad\0b\0d\d0\ad\0b\0f"
  "\0b\95\80\80\80\00\00\fd\0c\ff\ff\ff\ff\ff\ff\ff"
  "\7f\ff\ff\ff\ff\ff\ff\ff\7f\0f\0b\95\80\80\80\00"
  "\00\fd\0c\01\00\00\00\00\00\00\80\01\00\00\00\00"
  "\00\00\80\0f\0b\aa\80\80\80\00\00\fd\0c\00\00\00"
  "\00\00\00\00\80\00\00\00\00\00\00\00\80\fd\0c\01"
  "\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\fd"
  "\ce\01\0f\0b\95\80\80\80\00\00\fd\0c\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\0f\0b\95\80"
  "\80\80\00\00\fd\0c\1a\27\00\00\00\00\00\00\1a\27"
  "\00\00\00\00\00\00\0f\0b\95\80\80\80\00\00\fd\0c"
  "\2a\00\00\00\00\00\00\00\2a\00\00\00\00\00\00\00"
  "\0f\0b\94\80\80\80\00\00\fd\0c\00\a0\72\4e\18\09"
  "\00\00\00\a0\72\4e\18\09\00\00\0b\94\80\80\80\00"
  "\00\fd\0c\80\96\98\00\00\00\00\00\80\96\98\00\00"
  "\00\00\00\0b\94\80\80\80\00\00\fd\0c\99\00\0f\0a"
  "\99\00\0f\0a\99\00\0f\0a\99\00\0f\0a\0b\94\80\80"
  "\80\00\00\fd\0c\0f\aa\f1\a0\1a\00\00\00\0f\aa\f1"
  "\a0\1a\00\00\00\0b"
)
(assert_return
  (invoke "i32x4.test")
  (v128.const i32x4 0xbad_d00d 0xbad_d00d 0xbad_d00d 0xbad_d00d)
)
(assert_return
  (invoke "i32x4.smax")
  (v128.const i32x4 0x7fff_ffff 0x7fff_ffff 0x7fff_ffff 0x7fff_ffff)
)
(assert_return
  (invoke "i32x4.neg_smax")
  (v128.const i32x4 0x8000_0001 0x8000_0001 0x8000_0001 0x8000_0001)
)
(assert_return
  (invoke "i32x4.inc_smin")
  (v128.const i32x4 0x8000_0001 0x8000_0001 0x8000_0001 0x8000_0001)
)
(assert_return (invoke "i32x4.neg_zero") (v128.const i32x4 0x0 0x0 0x0 0x0))
(assert_return (invoke "i32x4.not_octal") (v128.const i32x4 0xa 0xa 0xa 0xa))
(assert_return
  (invoke "i32x4.plus_sign")
  (v128.const i32x4 0x2a 0x2a 0x2a 0x2a)
)
(assert_return
  (invoke "i32x4-dec-sep1")
  (v128.const i32x4 0xf_4240 0xf_4240 0xf_4240 0xf_4240)
)
(assert_return
  (invoke "i32x4-dec-sep2")
  (v128.const i32x4 0x3e8 0x3e8 0x3e8 0x3e8)
)
(assert_return
  (invoke "i32x4-hex-sep1")
  (v128.const i32x4 0xa0f_0099 0xa0f_0099 0xa0f_0099 0xa0f_0099)
)
(assert_return
  (invoke "i32x4-hex-sep2")
  (v128.const i32x4 0x1_aa0f 0x1_aa0f 0x1_aa0f 0x1_aa0f)
)
(assert_return
  (invoke "i64x2.test")
  (v128.const i64x2 0xbad_d00d_0bad_d00d 0xbad_d00d_0bad_d00d)
)
(assert_return
  (invoke "i64x2.smax")
  (v128.const i64x2 0x7fff_ffff_ffff_ffff 0x7fff_ffff_ffff_ffff)
)
(assert_return
  (invoke "i64x2.neg_smax")
  (v128.const i64x2 0x8000_0000_0000_0001 0x8000_0000_0000_0001)
)
(assert_return
  (invoke "i64x2.inc_smin")
  (v128.const i64x2 0x8000_0000_0000_0001 0x8000_0000_0000_0001)
)
(assert_return (invoke "i64x2.neg_zero") (v128.const i64x2 0x0 0x0))
(assert_return (invoke "i64x2.not_octal") (v128.const i64x2 0x271a 0x271a))
(assert_return (invoke "i64x2.plus_sign") (v128.const i64x2 0x2a 0x2a))
(assert_return
  (invoke "i64x2-dec-sep1")
  (v128.const i64x2 0x918_4e72_a000 0x918_4e72_a000)
)
(assert_return (invoke "i64x2-dec-sep2") (v128.const i64x2 0x98_9680 0x98_9680))
(assert_return
  (invoke "i64x2-hex-sep1")
  (v128.const i64x2 0xa0f_0099_0a0f_0099 0xa0f_0099_0a0f_0099)
)
(assert_return
  (invoke "i64x2-hex-sep2")
  (v128.const i64x2 0x1a_a0f1_aa0f 0x1a_a0f1_aa0f)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\95\80\80\80\00\14\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\07\ad"
  "\82\80\80\00\14\0c\66\33\32\2d\64\65\63\2d\73\65"
  "\70\31\00\00\0c\66\33\32\2d\64\65\63\2d\73\65\70"
  "\32\00\01\0c\66\33\32\2d\64\65\63\2d\73\65\70\33"
  "\00\02\0c\66\33\32\2d\64\65\63\2d\73\65\70\34\00"
  "\03\0c\66\33\32\2d\64\65\63\2d\73\65\70\35\00\04"
  "\0c\66\33\32\2d\68\65\78\2d\73\65\70\31\00\05\0c"
  "\66\33\32\2d\68\65\78\2d\73\65\70\32\00\06\0c\66"
  "\33\32\2d\68\65\78\2d\73\65\70\33\00\07\0c\66\33"
  "\32\2d\68\65\78\2d\73\65\70\34\00\08\0c\66\33\32"
  "\2d\68\65\78\2d\73\65\70\35\00\09\0c\66\36\34\2d"
  "\64\65\63\2d\73\65\70\31\00\0a\0c\66\36\34\2d\64"
  "\65\63\2d\73\65\70\32\00\0b\0c\66\36\34\2d\64\65"
  "\63\2d\73\65\70\33\00\0c\0c\66\36\34\2d\64\65\63"
  "\2d\73\65\70\34\00\0d\0c\66\36\34\2d\64\65\63\2d"
  "\73\65\70\35\00\0e\0c\66\36\34\2d\68\65\78\2d\73"
  "\65\70\31\00\0f\0c\66\36\34\2d\68\65\78\2d\73\65"
  "\70\32\00\10\0c\66\36\34\2d\68\65\78\2d\73\65\70"
  "\33\00\11\0c\66\36\34\2d\68\65\78\2d\73\65\70\34"
  "\00\12\0c\66\36\34\2d\68\65\78\2d\73\65\70\35\00"
  "\13\0a\f5\83\80\80\00\14\94\80\80\80\00\00\fd\0c"
  "\00\24\74\49\00\24\74\49\00\24\74\49\00\24\74\49"
  "\0b\94\80\80\80\00\00\fd\0c\00\00\7a\44\00\00\7a"
  "\44\00\00\7a\44\00\00\7a\44\0b\94\80\80\80\00\00"
  "\fd\0c\10\c9\7a\44\10\c9\7a\44\10\c9\7a\44\10\c9"
  "\7a\44\0b\94\80\80\80\00\00\fd\0c\96\19\61\58\96"
  "\19\61\58\96\19\61\58\96\19\61\58\0b\94\80\80\80"
  "\00\00\fd\0c\74\ae\1d\6e\74\ae\1d\6e\74\ae\1d\6e"
  "\74\ae\1d\6e\0b\94\80\80\80\00\00\fd\0c\0a\f0\20"
  "\4d\0a\f0\20\4d\0a\f0\20\4d\0a\f0\20\4d\0b\94\80"
  "\80\80\00\00\fd\0c\80\07\d5\47\80\07\d5\47\80\07"
  "\d5\47\80\07\d5\47\0b\94\80\80\80\00\00\fd\0c\f1"
  "\ff\20\47\f1\ff\20\47\f1\ff\20\47\f1\ff\20\47\0b"
  "\94\80\80\80\00\00\fd\0c\00\00\f0\49\00\00\f0\49"
  "\00\00\f0\49\00\00\f0\49\0b\94\80\80\80\00\00\fd"
  "\0c\28\c0\ab\55\28\c0\ab\55\28\c0\ab\55\28\c0\ab"
  "\55\0b\94\80\80\80\00\00\fd\0c\00\00\00\00\80\84"
  "\2e\41\00\00\00\00\80\84\2e\41\0b\94\80\80\80\00"
  "\00\fd\0c\00\00\00\00\00\40\8f\40\00\00\00\00\00"
  "\40\8f\40\0b\94\80\80\80\00\00\fd\0c\00\8b\fc\fa"
  "\21\59\8f\40\00\8b\fc\fa\21\59\8f\40\0b\94\80\80"
  "\80\00\00\fd\0c\00\00\9f\b2\32\23\0c\43\00\00\9f"
  "\b2\32\23\0c\43\0b\94\80\80\80\00\00\fd\0c\9c\de"
  "\5b\72\ce\b5\c3\45\9c\de\5b\72\ce\b5\c3\45\0b\94"
  "\80\80\80\00\00\fd\0c\00\00\00\32\01\1e\a4\41\00"
  "\00\00\32\01\1e\a4\41\0b\94\80\80\80\00\00\fd\0c"
  "\00\00\00\00\f0\a0\fa\40\00\00\00\00\f0\a0\fa\40"
  "\0b\94\80\80\80\00\00\fd\0c\40\b3\34\28\fe\1f\e4"
  "\40\40\b3\34\28\fe\1f\e4\40\0b\94\80\80\80\00\00"
  "\fd\0c\00\00\00\00\00\00\3e\41\00\00\00\00\00\00"
  "\3e\41\0b\94\80\80\80\00\00\fd\0c\00\70\9f\0f\05"
  "\78\b5\42\00\70\9f\0f\05\78\b5\42\0b"
)
(assert_return
  (invoke "f32-dec-sep1")
  (v128.const f32x4 0x1.e848p+19 0x1.e848p+19 0x1.e848p+19 0x1.e848p+19)
)
(assert_return
  (invoke "f32-dec-sep2")
  (v128.const f32x4 0x1.f4p+9 0x1.f4p+9 0x1.f4p+9 0x1.f4p+9)
)
(assert_return
  (invoke "f32-dec-sep3")
  (v128.const f32x4 0x1.f592_2p+9 0x1.f592_2p+9 0x1.f592_2p+9 0x1.f592_2p+9)
)
(assert_return
  (invoke "f32-dec-sep4")
  (v128.const f32x4
    0x1.c233_2cp+49
    0x1.c233_2cp+49
    0x1.c233_2cp+49
    0x1.c233_2cp+49
  )
)
(assert_return
  (invoke "f32-dec-sep5")
  (v128.const f32x4
    0x1.3b5c_e8p+93
    0x1.3b5c_e8p+93
    0x1.3b5c_e8p+93
    0x1.3b5c_e8p+93
  )
)
(assert_return
  (invoke "f32-hex-sep1")
  (v128.const f32x4
    0x1.41e0_14p+27
    0x1.41e0_14p+27
    0x1.41e0_14p+27
    0x1.41e0_14p+27
  )
)
(assert_return
  (invoke "f32-hex-sep2")
  (v128.const f32x4 0x1.aa0fp+16 0x1.aa0fp+16 0x1.aa0fp+16 0x1.aa0fp+16)
)
(assert_return
  (invoke "f32-hex-sep3")
  (v128.const f32x4
    0x1.41ff_e2p+15
    0x1.41ff_e2p+15
    0x1.41ff_e2p+15
    0x1.41ff_e2p+15
  )
)
(assert_return
  (invoke "f32-hex-sep4")
  (v128.const f32x4 0x1.ep+20 0x1.ep+20 0x1.ep+20 0x1.ep+20)
)
(assert_return
  (invoke "f32-hex-sep5")
  (v128.const f32x4 0x1.5780_5p+44 0x1.5780_5p+44 0x1.5780_5p+44 0x1.5780_5p+44)
)
(assert_return
  (invoke "f64-dec-sep1")
  (v128.const f64x2 0x1.e848p+19 0x1.e848p+19)
)
(assert_return (invoke "f64-dec-sep2") (v128.const f64x2 0x1.f4p+9 0x1.f4p+9))
(assert_return
  (invoke "f64-dec-sep3")
  (v128.const f64x2 0x1.f592_1faf_c8bp+9 0x1.f592_1faf_c8bp+9)
)
(assert_return
  (invoke "f64-dec-sep4")
  (v128.const f64x2 0x1.c233_2b29_fp+49 0x1.c233_2b29_fp+49)
)
(assert_return
  (invoke "f64-dec-sep5")
  (v128.const f64x2 0x1.3b5c_e725_bde9_cp+93 0x1.3b5c_e725_bde9_cp+93)
)
(assert_return
  (invoke "f64-hex-sep1")
  (v128.const f64x2 0x1.41e0_132p+27 0x1.41e0_132p+27)
)
(assert_return
  (invoke "f64-hex-sep2")
  (v128.const f64x2 0x1.aa0fp+16 0x1.aa0fp+16)
)
(assert_return
  (invoke "f64-hex-sep3")
  (v128.const f64x2 0x1.41ff_e283_4b34p+15 0x1.41ff_e283_4b34p+15)
)
(assert_return (invoke "f64-hex-sep4") (v128.const f64x2 0x1.ep+20 0x1.ep+20))
(assert_return
  (invoke "f64-hex-sep5")
  (v128.const f64x2 0x1.5780_50f9_f7p+44 0x1.5780_50f9_f7p+44)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\8f\80\80\80"
  "\00\01\0b\70\61\72\73\65\5f\69\38\78\31\36\00\00"
  "\0a\9a\80\80\80\00\01\94\80\80\80\00\00\fd\0c\00"
  "\00\00\00\80\80\80\80\ff\ff\ff\ff\ff\ff\ff\ff\0b"
)
(assert_return
  (invoke "parse_i8x16")
  (v128.const i8x16
    0x0
    0x0
    0x0
    0x0
    0x80
    0x80
    0x80
    0x80
    0xff
    0xff
    0xff
    0xff
    0xff
    0xff
    0xff
    0xff
  )
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\8f\80\80\80"
  "\00\01\0b\70\61\72\73\65\5f\69\31\36\78\38\00\00"
  "\0a\9a\80\80\80\00\01\94\80\80\80\00\00\fd\0c\00"
  "\00\00\00\00\80\00\80\ff\ff\ff\ff\ff\ff\ff\ff\0b"
)
(assert_return
  (invoke "parse_i16x8")
  (v128.const i16x8 0x0 0x0 0x8000 0x8000 0xffff 0xffff 0xffff 0xffff)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\8f\80\80\80"
  "\00\01\0b\70\61\72\73\65\5f\69\33\32\78\34\00\00"
  "\0a\9a\80\80\80\00\01\94\80\80\80\00\00\fd\0c\d1"
  "\ff\ff\ff\d1\ff\ff\ff\d1\ff\ff\ff\d1\ff\ff\ff\0b"
)
(assert_return
  (invoke "parse_i32x4")
  (v128.const i32x4 0xffff_ffd1 0xffff_ffd1 0xffff_ffd1 0xffff_ffd1)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\8f\80\80\80"
  "\00\01\0b\70\61\72\73\65\5f\69\36\34\78\32\00\00"
  "\0a\9a\80\80\80\00\01\94\80\80\80\00\00\fd\0c\ff"
  "\ff\ff\ff\ff\ff\ff\7f\ff\ff\ff\ff\ff\ff\ff\7f\0b"
)
(assert_return
  (invoke "parse_i64x2")
  (v128.const i64x2 0x7fff_ffff_ffff_ffff 0x7fff_ffff_ffff_ffff)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\8f\80\80\80"
  "\00\01\0b\70\61\72\73\65\5f\66\33\32\78\34\00\00"
  "\0a\9a\80\80\80\00\01\94\80\80\80\00\00\fd\0c\00"
  "\00\80\4f\00\00\80\4f\00\00\80\4f\00\00\80\4f\0b"
)
(assert_return
  (invoke "parse_f32x4")
  (v128.const f32x4 0x1p+32 0x1p+32 0x1p+32 0x1p+32)
)
(module binary
  "\00\61\73\6d\01\00\00\00\01\85\80\80\80\00\01\60"
  "\00\01\7b\03\82\80\80\80\00\01\00\07\8f\80\80\80"
  "\00\01\0b\70\61\72\73\65\5f\66\36\34\78\32\00\00"
  "\0a\9a\80\80\80\00\01\94\80\80\80\00\00\fd\0c\ff"
  "\ff\ff\ff\ff\ff\ef\7f\ff\ff\ff\ff\ff\ff\ef\7f\0b"
)
(assert_return
  (invoke "parse_f64x2")
  (v128.const f64x2 0x1.ffff_ffff_ffff_fp+1023 0x1.ffff_ffff_ffff_fp+1023)
)
